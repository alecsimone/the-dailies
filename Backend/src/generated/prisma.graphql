type AggregateComment {
  count: Int!
}

type AggregateContentPiece {
  count: Int!
}

type AggregateMember {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePass {
  count: Int!
}

type AggregateStack {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateThing {
  count: Int!
}

type AggregateTweet {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  author: Member!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime
  onThing: Thing
  onContentPiece: ContentPiece
  replies(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  replyTo: Comment
  onTag: Tag
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  score: Int
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  author: MemberCreateOneWithoutCommentsInput!
  comment: String!
  onThing: ThingCreateOneWithoutCommentsInput
  onContentPiece: ContentPieceCreateOneWithoutCommentsInput
  replies: CommentCreateManyWithoutRepliesInput
  replyTo: CommentCreateOneWithoutReplyToInput
  onTag: TagCreateOneWithoutCommentsInput
  votes: VoteCreateManyWithoutOnCommentInput
  score: Int
}

input CommentCreateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutOnContentPieceInput {
  create: [CommentCreateWithoutOnContentPieceInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutOnTagInput {
  create: [CommentCreateWithoutOnTagInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutOnThingInput {
  create: [CommentCreateWithoutOnThingInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutRepliesInput {
  create: [CommentCreateWithoutRepliesInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutReplyToInput {
  create: CommentCreateWithoutReplyToInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutAuthorInput {
  id: ID
  comment: String!
  onThing: ThingCreateOneWithoutCommentsInput
  onContentPiece: ContentPieceCreateOneWithoutCommentsInput
  replies: CommentCreateManyWithoutRepliesInput
  replyTo: CommentCreateOneWithoutReplyToInput
  onTag: TagCreateOneWithoutCommentsInput
  votes: VoteCreateManyWithoutOnCommentInput
  score: Int
}

input CommentCreateWithoutOnContentPieceInput {
  id: ID
  author: MemberCreateOneWithoutCommentsInput!
  comment: String!
  onThing: ThingCreateOneWithoutCommentsInput
  replies: CommentCreateManyWithoutRepliesInput
  replyTo: CommentCreateOneWithoutReplyToInput
  onTag: TagCreateOneWithoutCommentsInput
  votes: VoteCreateManyWithoutOnCommentInput
  score: Int
}

input CommentCreateWithoutOnTagInput {
  id: ID
  author: MemberCreateOneWithoutCommentsInput!
  comment: String!
  onThing: ThingCreateOneWithoutCommentsInput
  onContentPiece: ContentPieceCreateOneWithoutCommentsInput
  replies: CommentCreateManyWithoutRepliesInput
  replyTo: CommentCreateOneWithoutReplyToInput
  votes: VoteCreateManyWithoutOnCommentInput
  score: Int
}

input CommentCreateWithoutOnThingInput {
  id: ID
  author: MemberCreateOneWithoutCommentsInput!
  comment: String!
  onContentPiece: ContentPieceCreateOneWithoutCommentsInput
  replies: CommentCreateManyWithoutRepliesInput
  replyTo: CommentCreateOneWithoutReplyToInput
  onTag: TagCreateOneWithoutCommentsInput
  votes: VoteCreateManyWithoutOnCommentInput
  score: Int
}

input CommentCreateWithoutRepliesInput {
  id: ID
  author: MemberCreateOneWithoutCommentsInput!
  comment: String!
  onThing: ThingCreateOneWithoutCommentsInput
  onContentPiece: ContentPieceCreateOneWithoutCommentsInput
  replyTo: CommentCreateOneWithoutReplyToInput
  onTag: TagCreateOneWithoutCommentsInput
  votes: VoteCreateManyWithoutOnCommentInput
  score: Int
}

input CommentCreateWithoutReplyToInput {
  id: ID
  author: MemberCreateOneWithoutCommentsInput!
  comment: String!
  onThing: ThingCreateOneWithoutCommentsInput
  onContentPiece: ContentPieceCreateOneWithoutCommentsInput
  replies: CommentCreateManyWithoutRepliesInput
  onTag: TagCreateOneWithoutCommentsInput
  votes: VoteCreateManyWithoutOnCommentInput
  score: Int
}

input CommentCreateWithoutVotesInput {
  id: ID
  author: MemberCreateOneWithoutCommentsInput!
  comment: String!
  onThing: ThingCreateOneWithoutCommentsInput
  onContentPiece: ContentPieceCreateOneWithoutCommentsInput
  replies: CommentCreateManyWithoutRepliesInput
  replyTo: CommentCreateOneWithoutReplyToInput
  onTag: TagCreateOneWithoutCommentsInput
  score: Int
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  score_ASC
  score_DESC
}

type CommentPreviousValues {
  id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime
  score: Int
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateDataInput {
  author: MemberUpdateOneRequiredWithoutCommentsInput
  comment: String
  onThing: ThingUpdateOneWithoutCommentsInput
  onContentPiece: ContentPieceUpdateOneWithoutCommentsInput
  replies: CommentUpdateManyWithoutRepliesInput
  replyTo: CommentUpdateOneWithoutReplyToInput
  onTag: TagUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutOnCommentInput
  score: Int
}

input CommentUpdateInput {
  author: MemberUpdateOneRequiredWithoutCommentsInput
  comment: String
  onThing: ThingUpdateOneWithoutCommentsInput
  onContentPiece: ContentPieceUpdateOneWithoutCommentsInput
  replies: CommentUpdateManyWithoutRepliesInput
  replyTo: CommentUpdateOneWithoutReplyToInput
  onTag: TagUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutOnCommentInput
  score: Int
}

input CommentUpdateManyDataInput {
  comment: String
  score: Int
}

input CommentUpdateManyInput {
  create: [CommentCreateInput!]
  update: [CommentUpdateWithWhereUniqueNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueNestedInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyMutationInput {
  comment: String
  score: Int
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutOnContentPieceInput {
  create: [CommentCreateWithoutOnContentPieceInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOnContentPieceInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOnContentPieceInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutOnTagInput {
  create: [CommentCreateWithoutOnTagInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOnTagInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOnTagInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutOnThingInput {
  create: [CommentCreateWithoutOnThingInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOnThingInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOnThingInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutRepliesInput {
  create: [CommentCreateWithoutRepliesInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutRepliesInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutRepliesInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneWithoutReplyToInput {
  create: CommentCreateWithoutReplyToInput
  update: CommentUpdateWithoutReplyToDataInput
  upsert: CommentUpsertWithoutReplyToInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  update: CommentUpdateWithoutVotesDataInput
  upsert: CommentUpsertWithoutVotesInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutAuthorDataInput {
  comment: String
  onThing: ThingUpdateOneWithoutCommentsInput
  onContentPiece: ContentPieceUpdateOneWithoutCommentsInput
  replies: CommentUpdateManyWithoutRepliesInput
  replyTo: CommentUpdateOneWithoutReplyToInput
  onTag: TagUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutOnCommentInput
  score: Int
}

input CommentUpdateWithoutOnContentPieceDataInput {
  author: MemberUpdateOneRequiredWithoutCommentsInput
  comment: String
  onThing: ThingUpdateOneWithoutCommentsInput
  replies: CommentUpdateManyWithoutRepliesInput
  replyTo: CommentUpdateOneWithoutReplyToInput
  onTag: TagUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutOnCommentInput
  score: Int
}

input CommentUpdateWithoutOnTagDataInput {
  author: MemberUpdateOneRequiredWithoutCommentsInput
  comment: String
  onThing: ThingUpdateOneWithoutCommentsInput
  onContentPiece: ContentPieceUpdateOneWithoutCommentsInput
  replies: CommentUpdateManyWithoutRepliesInput
  replyTo: CommentUpdateOneWithoutReplyToInput
  votes: VoteUpdateManyWithoutOnCommentInput
  score: Int
}

input CommentUpdateWithoutOnThingDataInput {
  author: MemberUpdateOneRequiredWithoutCommentsInput
  comment: String
  onContentPiece: ContentPieceUpdateOneWithoutCommentsInput
  replies: CommentUpdateManyWithoutRepliesInput
  replyTo: CommentUpdateOneWithoutReplyToInput
  onTag: TagUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutOnCommentInput
  score: Int
}

input CommentUpdateWithoutRepliesDataInput {
  author: MemberUpdateOneRequiredWithoutCommentsInput
  comment: String
  onThing: ThingUpdateOneWithoutCommentsInput
  onContentPiece: ContentPieceUpdateOneWithoutCommentsInput
  replyTo: CommentUpdateOneWithoutReplyToInput
  onTag: TagUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutOnCommentInput
  score: Int
}

input CommentUpdateWithoutReplyToDataInput {
  author: MemberUpdateOneRequiredWithoutCommentsInput
  comment: String
  onThing: ThingUpdateOneWithoutCommentsInput
  onContentPiece: ContentPieceUpdateOneWithoutCommentsInput
  replies: CommentUpdateManyWithoutRepliesInput
  onTag: TagUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutOnCommentInput
  score: Int
}

input CommentUpdateWithoutVotesDataInput {
  author: MemberUpdateOneRequiredWithoutCommentsInput
  comment: String
  onThing: ThingUpdateOneWithoutCommentsInput
  onContentPiece: ContentPieceUpdateOneWithoutCommentsInput
  replies: CommentUpdateManyWithoutRepliesInput
  replyTo: CommentUpdateOneWithoutReplyToInput
  onTag: TagUpdateOneWithoutCommentsInput
  score: Int
}

input CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateDataInput!
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutOnContentPieceInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutOnContentPieceDataInput!
}

input CommentUpdateWithWhereUniqueWithoutOnTagInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutOnTagDataInput!
}

input CommentUpdateWithWhereUniqueWithoutOnThingInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutOnThingDataInput!
}

input CommentUpdateWithWhereUniqueWithoutRepliesInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutRepliesDataInput!
}

input CommentUpsertWithoutReplyToInput {
  update: CommentUpdateWithoutReplyToDataInput!
  create: CommentCreateWithoutReplyToInput!
}

input CommentUpsertWithoutVotesInput {
  update: CommentUpdateWithoutVotesDataInput!
  create: CommentCreateWithoutVotesInput!
}

input CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutOnContentPieceInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutOnContentPieceDataInput!
  create: CommentCreateWithoutOnContentPieceInput!
}

input CommentUpsertWithWhereUniqueWithoutOnTagInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutOnTagDataInput!
  create: CommentCreateWithoutOnTagInput!
}

input CommentUpsertWithWhereUniqueWithoutOnThingInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutOnThingDataInput!
  create: CommentCreateWithoutOnThingInput!
}

input CommentUpsertWithWhereUniqueWithoutRepliesInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutRepliesDataInput!
  create: CommentCreateWithoutRepliesInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: MemberWhereInput
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  onThing: ThingWhereInput
  onContentPiece: ContentPieceWhereInput
  replies_every: CommentWhereInput
  replies_some: CommentWhereInput
  replies_none: CommentWhereInput
  replyTo: CommentWhereInput
  onTag: TagWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

type ContentPiece {
  id: ID!
  content: String!
  summary: String
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  onThing: Thing
  copiedToThings(where: ThingWhereInput, orderBy: ThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thing!]
  onTag: Tag
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  score: Int!
}

type ContentPieceConnection {
  pageInfo: PageInfo!
  edges: [ContentPieceEdge]!
  aggregate: AggregateContentPiece!
}

input ContentPieceCreateInput {
  id: ID
  content: String!
  summary: String
  comments: CommentCreateManyWithoutOnContentPieceInput
  onThing: ThingCreateOneWithoutContentInput
  copiedToThings: ThingCreateManyWithoutCopiedInContentInput
  onTag: TagCreateOneWithoutContentInput
  votes: VoteCreateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceCreateManyInput {
  create: [ContentPieceCreateInput!]
  connect: [ContentPieceWhereUniqueInput!]
}

input ContentPieceCreateManyWithoutCopiedToThingsInput {
  create: [ContentPieceCreateWithoutCopiedToThingsInput!]
  connect: [ContentPieceWhereUniqueInput!]
}

input ContentPieceCreateManyWithoutOnTagInput {
  create: [ContentPieceCreateWithoutOnTagInput!]
  connect: [ContentPieceWhereUniqueInput!]
}

input ContentPieceCreateManyWithoutOnThingInput {
  create: [ContentPieceCreateWithoutOnThingInput!]
  connect: [ContentPieceWhereUniqueInput!]
}

input ContentPieceCreateOneWithoutCommentsInput {
  create: ContentPieceCreateWithoutCommentsInput
  connect: ContentPieceWhereUniqueInput
}

input ContentPieceCreateOneWithoutVotesInput {
  create: ContentPieceCreateWithoutVotesInput
  connect: ContentPieceWhereUniqueInput
}

input ContentPieceCreateWithoutCommentsInput {
  id: ID
  content: String!
  summary: String
  onThing: ThingCreateOneWithoutContentInput
  copiedToThings: ThingCreateManyWithoutCopiedInContentInput
  onTag: TagCreateOneWithoutContentInput
  votes: VoteCreateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceCreateWithoutCopiedToThingsInput {
  id: ID
  content: String!
  summary: String
  comments: CommentCreateManyWithoutOnContentPieceInput
  onThing: ThingCreateOneWithoutContentInput
  onTag: TagCreateOneWithoutContentInput
  votes: VoteCreateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceCreateWithoutOnTagInput {
  id: ID
  content: String!
  summary: String
  comments: CommentCreateManyWithoutOnContentPieceInput
  onThing: ThingCreateOneWithoutContentInput
  copiedToThings: ThingCreateManyWithoutCopiedInContentInput
  votes: VoteCreateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceCreateWithoutOnThingInput {
  id: ID
  content: String!
  summary: String
  comments: CommentCreateManyWithoutOnContentPieceInput
  copiedToThings: ThingCreateManyWithoutCopiedInContentInput
  onTag: TagCreateOneWithoutContentInput
  votes: VoteCreateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceCreateWithoutVotesInput {
  id: ID
  content: String!
  summary: String
  comments: CommentCreateManyWithoutOnContentPieceInput
  onThing: ThingCreateOneWithoutContentInput
  copiedToThings: ThingCreateManyWithoutCopiedInContentInput
  onTag: TagCreateOneWithoutContentInput
  score: Int
}

type ContentPieceEdge {
  node: ContentPiece!
  cursor: String!
}

enum ContentPieceOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  summary_ASC
  summary_DESC
  score_ASC
  score_DESC
}

type ContentPiecePreviousValues {
  id: ID!
  content: String!
  summary: String
  score: Int!
}

input ContentPieceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  AND: [ContentPieceScalarWhereInput!]
  OR: [ContentPieceScalarWhereInput!]
  NOT: [ContentPieceScalarWhereInput!]
}

type ContentPieceSubscriptionPayload {
  mutation: MutationType!
  node: ContentPiece
  updatedFields: [String!]
  previousValues: ContentPiecePreviousValues
}

input ContentPieceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContentPieceWhereInput
  AND: [ContentPieceSubscriptionWhereInput!]
  OR: [ContentPieceSubscriptionWhereInput!]
  NOT: [ContentPieceSubscriptionWhereInput!]
}

input ContentPieceUpdateDataInput {
  content: String
  summary: String
  comments: CommentUpdateManyWithoutOnContentPieceInput
  onThing: ThingUpdateOneWithoutContentInput
  copiedToThings: ThingUpdateManyWithoutCopiedInContentInput
  onTag: TagUpdateOneWithoutContentInput
  votes: VoteUpdateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceUpdateInput {
  content: String
  summary: String
  comments: CommentUpdateManyWithoutOnContentPieceInput
  onThing: ThingUpdateOneWithoutContentInput
  copiedToThings: ThingUpdateManyWithoutCopiedInContentInput
  onTag: TagUpdateOneWithoutContentInput
  votes: VoteUpdateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceUpdateManyDataInput {
  content: String
  summary: String
  score: Int
}

input ContentPieceUpdateManyInput {
  create: [ContentPieceCreateInput!]
  update: [ContentPieceUpdateWithWhereUniqueNestedInput!]
  upsert: [ContentPieceUpsertWithWhereUniqueNestedInput!]
  delete: [ContentPieceWhereUniqueInput!]
  connect: [ContentPieceWhereUniqueInput!]
  set: [ContentPieceWhereUniqueInput!]
  disconnect: [ContentPieceWhereUniqueInput!]
  deleteMany: [ContentPieceScalarWhereInput!]
  updateMany: [ContentPieceUpdateManyWithWhereNestedInput!]
}

input ContentPieceUpdateManyMutationInput {
  content: String
  summary: String
  score: Int
}

input ContentPieceUpdateManyWithoutCopiedToThingsInput {
  create: [ContentPieceCreateWithoutCopiedToThingsInput!]
  delete: [ContentPieceWhereUniqueInput!]
  connect: [ContentPieceWhereUniqueInput!]
  set: [ContentPieceWhereUniqueInput!]
  disconnect: [ContentPieceWhereUniqueInput!]
  update: [ContentPieceUpdateWithWhereUniqueWithoutCopiedToThingsInput!]
  upsert: [ContentPieceUpsertWithWhereUniqueWithoutCopiedToThingsInput!]
  deleteMany: [ContentPieceScalarWhereInput!]
  updateMany: [ContentPieceUpdateManyWithWhereNestedInput!]
}

input ContentPieceUpdateManyWithoutOnTagInput {
  create: [ContentPieceCreateWithoutOnTagInput!]
  delete: [ContentPieceWhereUniqueInput!]
  connect: [ContentPieceWhereUniqueInput!]
  set: [ContentPieceWhereUniqueInput!]
  disconnect: [ContentPieceWhereUniqueInput!]
  update: [ContentPieceUpdateWithWhereUniqueWithoutOnTagInput!]
  upsert: [ContentPieceUpsertWithWhereUniqueWithoutOnTagInput!]
  deleteMany: [ContentPieceScalarWhereInput!]
  updateMany: [ContentPieceUpdateManyWithWhereNestedInput!]
}

input ContentPieceUpdateManyWithoutOnThingInput {
  create: [ContentPieceCreateWithoutOnThingInput!]
  delete: [ContentPieceWhereUniqueInput!]
  connect: [ContentPieceWhereUniqueInput!]
  set: [ContentPieceWhereUniqueInput!]
  disconnect: [ContentPieceWhereUniqueInput!]
  update: [ContentPieceUpdateWithWhereUniqueWithoutOnThingInput!]
  upsert: [ContentPieceUpsertWithWhereUniqueWithoutOnThingInput!]
  deleteMany: [ContentPieceScalarWhereInput!]
  updateMany: [ContentPieceUpdateManyWithWhereNestedInput!]
}

input ContentPieceUpdateManyWithWhereNestedInput {
  where: ContentPieceScalarWhereInput!
  data: ContentPieceUpdateManyDataInput!
}

input ContentPieceUpdateOneWithoutCommentsInput {
  create: ContentPieceCreateWithoutCommentsInput
  update: ContentPieceUpdateWithoutCommentsDataInput
  upsert: ContentPieceUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: ContentPieceWhereUniqueInput
}

input ContentPieceUpdateOneWithoutVotesInput {
  create: ContentPieceCreateWithoutVotesInput
  update: ContentPieceUpdateWithoutVotesDataInput
  upsert: ContentPieceUpsertWithoutVotesInput
  delete: Boolean
  disconnect: Boolean
  connect: ContentPieceWhereUniqueInput
}

input ContentPieceUpdateWithoutCommentsDataInput {
  content: String
  summary: String
  onThing: ThingUpdateOneWithoutContentInput
  copiedToThings: ThingUpdateManyWithoutCopiedInContentInput
  onTag: TagUpdateOneWithoutContentInput
  votes: VoteUpdateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceUpdateWithoutCopiedToThingsDataInput {
  content: String
  summary: String
  comments: CommentUpdateManyWithoutOnContentPieceInput
  onThing: ThingUpdateOneWithoutContentInput
  onTag: TagUpdateOneWithoutContentInput
  votes: VoteUpdateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceUpdateWithoutOnTagDataInput {
  content: String
  summary: String
  comments: CommentUpdateManyWithoutOnContentPieceInput
  onThing: ThingUpdateOneWithoutContentInput
  copiedToThings: ThingUpdateManyWithoutCopiedInContentInput
  votes: VoteUpdateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceUpdateWithoutOnThingDataInput {
  content: String
  summary: String
  comments: CommentUpdateManyWithoutOnContentPieceInput
  copiedToThings: ThingUpdateManyWithoutCopiedInContentInput
  onTag: TagUpdateOneWithoutContentInput
  votes: VoteUpdateManyWithoutOnContentPieceInput
  score: Int
}

input ContentPieceUpdateWithoutVotesDataInput {
  content: String
  summary: String
  comments: CommentUpdateManyWithoutOnContentPieceInput
  onThing: ThingUpdateOneWithoutContentInput
  copiedToThings: ThingUpdateManyWithoutCopiedInContentInput
  onTag: TagUpdateOneWithoutContentInput
  score: Int
}

input ContentPieceUpdateWithWhereUniqueNestedInput {
  where: ContentPieceWhereUniqueInput!
  data: ContentPieceUpdateDataInput!
}

input ContentPieceUpdateWithWhereUniqueWithoutCopiedToThingsInput {
  where: ContentPieceWhereUniqueInput!
  data: ContentPieceUpdateWithoutCopiedToThingsDataInput!
}

input ContentPieceUpdateWithWhereUniqueWithoutOnTagInput {
  where: ContentPieceWhereUniqueInput!
  data: ContentPieceUpdateWithoutOnTagDataInput!
}

input ContentPieceUpdateWithWhereUniqueWithoutOnThingInput {
  where: ContentPieceWhereUniqueInput!
  data: ContentPieceUpdateWithoutOnThingDataInput!
}

input ContentPieceUpsertWithoutCommentsInput {
  update: ContentPieceUpdateWithoutCommentsDataInput!
  create: ContentPieceCreateWithoutCommentsInput!
}

input ContentPieceUpsertWithoutVotesInput {
  update: ContentPieceUpdateWithoutVotesDataInput!
  create: ContentPieceCreateWithoutVotesInput!
}

input ContentPieceUpsertWithWhereUniqueNestedInput {
  where: ContentPieceWhereUniqueInput!
  update: ContentPieceUpdateDataInput!
  create: ContentPieceCreateInput!
}

input ContentPieceUpsertWithWhereUniqueWithoutCopiedToThingsInput {
  where: ContentPieceWhereUniqueInput!
  update: ContentPieceUpdateWithoutCopiedToThingsDataInput!
  create: ContentPieceCreateWithoutCopiedToThingsInput!
}

input ContentPieceUpsertWithWhereUniqueWithoutOnTagInput {
  where: ContentPieceWhereUniqueInput!
  update: ContentPieceUpdateWithoutOnTagDataInput!
  create: ContentPieceCreateWithoutOnTagInput!
}

input ContentPieceUpsertWithWhereUniqueWithoutOnThingInput {
  where: ContentPieceWhereUniqueInput!
  update: ContentPieceUpdateWithoutOnThingDataInput!
  create: ContentPieceCreateWithoutOnThingInput!
}

input ContentPieceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  onThing: ThingWhereInput
  copiedToThings_every: ThingWhereInput
  copiedToThings_some: ThingWhereInput
  copiedToThings_none: ThingWhereInput
  onTag: TagWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  AND: [ContentPieceWhereInput!]
  OR: [ContentPieceWhereInput!]
  NOT: [ContentPieceWhereInput!]
}

input ContentPieceWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Json

scalar Long

type Member {
  id: ID!
  displayName: String!
  name: String
  avatar: String
  rep: Int!
  points: Int!
  giveableRep: Int!
  color: String
  friends(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member!]
  friendRequests(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member!]
  ignoredFriendRequests(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  twitchName: String
  email: String!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  passes(where: PassWhereInput, orderBy: PassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pass!]
  createdThings(where: ThingWhereInput, orderBy: ThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thing!]
  ownedTags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  password: String!
  roles: [Role!]!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

type MemberConnection {
  pageInfo: PageInfo!
  edges: [MemberEdge]!
  aggregate: AggregateMember!
}

input MemberCreateInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  passes: PassCreateManyWithoutPasserInput
  createdThings: ThingCreateManyWithoutAuthorInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateManyWithoutFriendRequestsInput {
  create: [MemberCreateWithoutFriendRequestsInput!]
  connect: [MemberWhereUniqueInput!]
}

input MemberCreateManyWithoutFriendsInput {
  create: [MemberCreateWithoutFriendsInput!]
  connect: [MemberWhereUniqueInput!]
}

input MemberCreateManyWithoutIgnoredFriendRequestsInput {
  create: [MemberCreateWithoutIgnoredFriendRequestsInput!]
  connect: [MemberWhereUniqueInput!]
}

input MemberCreateOneInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

input MemberCreateOneWithoutCommentsInput {
  create: MemberCreateWithoutCommentsInput
  connect: MemberWhereUniqueInput
}

input MemberCreateOneWithoutCreatedThingsInput {
  create: MemberCreateWithoutCreatedThingsInput
  connect: MemberWhereUniqueInput
}

input MemberCreateOneWithoutNotificationsInput {
  create: MemberCreateWithoutNotificationsInput
  connect: MemberWhereUniqueInput
}

input MemberCreateOneWithoutOwnedTagsInput {
  create: MemberCreateWithoutOwnedTagsInput
  connect: MemberWhereUniqueInput
}

input MemberCreateOneWithoutPassesInput {
  create: MemberCreateWithoutPassesInput
  connect: MemberWhereUniqueInput
}

input MemberCreateOneWithoutVotesInput {
  create: MemberCreateWithoutVotesInput
  connect: MemberWhereUniqueInput
}

input MemberCreaterolesInput {
  set: [Role!]
}

input MemberCreatetwitterSeenIDsInput {
  set: [String!]
}

input MemberCreateWithoutCommentsInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  passes: PassCreateManyWithoutPasserInput
  createdThings: ThingCreateManyWithoutAuthorInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateWithoutCreatedThingsInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  passes: PassCreateManyWithoutPasserInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateWithoutFriendRequestsInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  passes: PassCreateManyWithoutPasserInput
  createdThings: ThingCreateManyWithoutAuthorInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateWithoutFriendsInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  passes: PassCreateManyWithoutPasserInput
  createdThings: ThingCreateManyWithoutAuthorInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateWithoutIgnoredFriendRequestsInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  passes: PassCreateManyWithoutPasserInput
  createdThings: ThingCreateManyWithoutAuthorInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateWithoutNotificationsInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  passes: PassCreateManyWithoutPasserInput
  createdThings: ThingCreateManyWithoutAuthorInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateWithoutOwnedTagsInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  passes: PassCreateManyWithoutPasserInput
  createdThings: ThingCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateWithoutPassesInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  votes: VoteCreateManyWithoutVoterInput
  createdThings: ThingCreateManyWithoutAuthorInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

input MemberCreateWithoutVotesInput {
  id: ID
  displayName: String!
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberCreateManyWithoutFriendsInput
  friendRequests: MemberCreateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberCreateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationCreateManyWithoutRecipientInput
  twitchName: String
  email: String!
  passes: PassCreateManyWithoutPasserInput
  createdThings: ThingCreateManyWithoutAuthorInput
  ownedTags: TagCreateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentCreateManyWithoutAuthorInput
  password: String!
  roles: MemberCreaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberCreatetwitterSeenIDsInput
}

type MemberEdge {
  node: Member!
  cursor: String!
}

enum MemberOrderByInput {
  id_ASC
  id_DESC
  displayName_ASC
  displayName_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
  rep_ASC
  rep_DESC
  points_ASC
  points_DESC
  giveableRep_ASC
  giveableRep_DESC
  color_ASC
  color_DESC
  twitchName_ASC
  twitchName_DESC
  email_ASC
  email_DESC
  defaultPrivacy_ASC
  defaultPrivacy_DESC
  defaultExpansion_ASC
  defaultExpansion_DESC
  broadcastView_ASC
  broadcastView_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  twitterTokenSecret_ASC
  twitterTokenSecret_DESC
  twitterUserName_ASC
  twitterUserName_DESC
  twitterUserID_ASC
  twitterUserID_DESC
  twitterUserToken_ASC
  twitterUserToken_DESC
  twitterUserTokenSecret_ASC
  twitterUserTokenSecret_DESC
  twitterListsObject_ASC
  twitterListsObject_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MemberPreviousValues {
  id: ID!
  displayName: String!
  name: String
  avatar: String
  rep: Int!
  points: Int!
  giveableRep: Int!
  color: String
  twitchName: String
  email: String!
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  password: String!
  roles: [Role!]!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

input MemberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  rep: Int
  rep_not: Int
  rep_in: [Int!]
  rep_not_in: [Int!]
  rep_lt: Int
  rep_lte: Int
  rep_gt: Int
  rep_gte: Int
  points: Int
  points_not: Int
  points_in: [Int!]
  points_not_in: [Int!]
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  giveableRep: Int
  giveableRep_not: Int
  giveableRep_in: [Int!]
  giveableRep_not_in: [Int!]
  giveableRep_lt: Int
  giveableRep_lte: Int
  giveableRep_gt: Int
  giveableRep_gte: Int
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  twitchName: String
  twitchName_not: String
  twitchName_in: [String!]
  twitchName_not_in: [String!]
  twitchName_lt: String
  twitchName_lte: String
  twitchName_gt: String
  twitchName_gte: String
  twitchName_contains: String
  twitchName_not_contains: String
  twitchName_starts_with: String
  twitchName_not_starts_with: String
  twitchName_ends_with: String
  twitchName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  defaultPrivacy: PrivacySetting
  defaultPrivacy_not: PrivacySetting
  defaultPrivacy_in: [PrivacySetting!]
  defaultPrivacy_not_in: [PrivacySetting!]
  defaultExpansion: Boolean
  defaultExpansion_not: Boolean
  broadcastView: Boolean
  broadcastView_not: Boolean
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  twitterTokenSecret: String
  twitterTokenSecret_not: String
  twitterTokenSecret_in: [String!]
  twitterTokenSecret_not_in: [String!]
  twitterTokenSecret_lt: String
  twitterTokenSecret_lte: String
  twitterTokenSecret_gt: String
  twitterTokenSecret_gte: String
  twitterTokenSecret_contains: String
  twitterTokenSecret_not_contains: String
  twitterTokenSecret_starts_with: String
  twitterTokenSecret_not_starts_with: String
  twitterTokenSecret_ends_with: String
  twitterTokenSecret_not_ends_with: String
  twitterUserName: String
  twitterUserName_not: String
  twitterUserName_in: [String!]
  twitterUserName_not_in: [String!]
  twitterUserName_lt: String
  twitterUserName_lte: String
  twitterUserName_gt: String
  twitterUserName_gte: String
  twitterUserName_contains: String
  twitterUserName_not_contains: String
  twitterUserName_starts_with: String
  twitterUserName_not_starts_with: String
  twitterUserName_ends_with: String
  twitterUserName_not_ends_with: String
  twitterUserID: String
  twitterUserID_not: String
  twitterUserID_in: [String!]
  twitterUserID_not_in: [String!]
  twitterUserID_lt: String
  twitterUserID_lte: String
  twitterUserID_gt: String
  twitterUserID_gte: String
  twitterUserID_contains: String
  twitterUserID_not_contains: String
  twitterUserID_starts_with: String
  twitterUserID_not_starts_with: String
  twitterUserID_ends_with: String
  twitterUserID_not_ends_with: String
  twitterUserToken: String
  twitterUserToken_not: String
  twitterUserToken_in: [String!]
  twitterUserToken_not_in: [String!]
  twitterUserToken_lt: String
  twitterUserToken_lte: String
  twitterUserToken_gt: String
  twitterUserToken_gte: String
  twitterUserToken_contains: String
  twitterUserToken_not_contains: String
  twitterUserToken_starts_with: String
  twitterUserToken_not_starts_with: String
  twitterUserToken_ends_with: String
  twitterUserToken_not_ends_with: String
  twitterUserTokenSecret: String
  twitterUserTokenSecret_not: String
  twitterUserTokenSecret_in: [String!]
  twitterUserTokenSecret_not_in: [String!]
  twitterUserTokenSecret_lt: String
  twitterUserTokenSecret_lte: String
  twitterUserTokenSecret_gt: String
  twitterUserTokenSecret_gte: String
  twitterUserTokenSecret_contains: String
  twitterUserTokenSecret_not_contains: String
  twitterUserTokenSecret_starts_with: String
  twitterUserTokenSecret_not_starts_with: String
  twitterUserTokenSecret_ends_with: String
  twitterUserTokenSecret_not_ends_with: String
  twitterListsObject: String
  twitterListsObject_not: String
  twitterListsObject_in: [String!]
  twitterListsObject_not_in: [String!]
  twitterListsObject_lt: String
  twitterListsObject_lte: String
  twitterListsObject_gt: String
  twitterListsObject_gte: String
  twitterListsObject_contains: String
  twitterListsObject_not_contains: String
  twitterListsObject_starts_with: String
  twitterListsObject_not_starts_with: String
  twitterListsObject_ends_with: String
  twitterListsObject_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MemberScalarWhereInput!]
  OR: [MemberScalarWhereInput!]
  NOT: [MemberScalarWhereInput!]
}

type MemberSubscriptionPayload {
  mutation: MutationType!
  node: Member
  updatedFields: [String!]
  previousValues: MemberPreviousValues
}

input MemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MemberWhereInput
  AND: [MemberSubscriptionWhereInput!]
  OR: [MemberSubscriptionWhereInput!]
  NOT: [MemberSubscriptionWhereInput!]
}

input MemberUpdateDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateManyDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  twitchName: String
  email: String
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateManyMutationInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  twitchName: String
  email: String
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateManyWithoutFriendRequestsInput {
  create: [MemberCreateWithoutFriendRequestsInput!]
  delete: [MemberWhereUniqueInput!]
  connect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  disconnect: [MemberWhereUniqueInput!]
  update: [MemberUpdateWithWhereUniqueWithoutFriendRequestsInput!]
  upsert: [MemberUpsertWithWhereUniqueWithoutFriendRequestsInput!]
  deleteMany: [MemberScalarWhereInput!]
  updateMany: [MemberUpdateManyWithWhereNestedInput!]
}

input MemberUpdateManyWithoutFriendsInput {
  create: [MemberCreateWithoutFriendsInput!]
  delete: [MemberWhereUniqueInput!]
  connect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  disconnect: [MemberWhereUniqueInput!]
  update: [MemberUpdateWithWhereUniqueWithoutFriendsInput!]
  upsert: [MemberUpsertWithWhereUniqueWithoutFriendsInput!]
  deleteMany: [MemberScalarWhereInput!]
  updateMany: [MemberUpdateManyWithWhereNestedInput!]
}

input MemberUpdateManyWithoutIgnoredFriendRequestsInput {
  create: [MemberCreateWithoutIgnoredFriendRequestsInput!]
  delete: [MemberWhereUniqueInput!]
  connect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  disconnect: [MemberWhereUniqueInput!]
  update: [MemberUpdateWithWhereUniqueWithoutIgnoredFriendRequestsInput!]
  upsert: [MemberUpsertWithWhereUniqueWithoutIgnoredFriendRequestsInput!]
  deleteMany: [MemberScalarWhereInput!]
  updateMany: [MemberUpdateManyWithWhereNestedInput!]
}

input MemberUpdateManyWithWhereNestedInput {
  where: MemberScalarWhereInput!
  data: MemberUpdateManyDataInput!
}

input MemberUpdateOneRequiredInput {
  create: MemberCreateInput
  update: MemberUpdateDataInput
  upsert: MemberUpsertNestedInput
  connect: MemberWhereUniqueInput
}

input MemberUpdateOneRequiredWithoutCommentsInput {
  create: MemberCreateWithoutCommentsInput
  update: MemberUpdateWithoutCommentsDataInput
  upsert: MemberUpsertWithoutCommentsInput
  connect: MemberWhereUniqueInput
}

input MemberUpdateOneRequiredWithoutCreatedThingsInput {
  create: MemberCreateWithoutCreatedThingsInput
  update: MemberUpdateWithoutCreatedThingsDataInput
  upsert: MemberUpsertWithoutCreatedThingsInput
  connect: MemberWhereUniqueInput
}

input MemberUpdateOneRequiredWithoutNotificationsInput {
  create: MemberCreateWithoutNotificationsInput
  update: MemberUpdateWithoutNotificationsDataInput
  upsert: MemberUpsertWithoutNotificationsInput
  connect: MemberWhereUniqueInput
}

input MemberUpdateOneRequiredWithoutOwnedTagsInput {
  create: MemberCreateWithoutOwnedTagsInput
  update: MemberUpdateWithoutOwnedTagsDataInput
  upsert: MemberUpsertWithoutOwnedTagsInput
  connect: MemberWhereUniqueInput
}

input MemberUpdateOneRequiredWithoutPassesInput {
  create: MemberCreateWithoutPassesInput
  update: MemberUpdateWithoutPassesDataInput
  upsert: MemberUpsertWithoutPassesInput
  connect: MemberWhereUniqueInput
}

input MemberUpdateOneRequiredWithoutVotesInput {
  create: MemberCreateWithoutVotesInput
  update: MemberUpdateWithoutVotesDataInput
  upsert: MemberUpsertWithoutVotesInput
  connect: MemberWhereUniqueInput
}

input MemberUpdaterolesInput {
  set: [Role!]
}

input MemberUpdatetwitterSeenIDsInput {
  set: [String!]
}

input MemberUpdateWithoutCommentsDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithoutCreatedThingsDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithoutFriendRequestsDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithoutFriendsDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithoutIgnoredFriendRequestsDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithoutNotificationsDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithoutOwnedTagsDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithoutPassesDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  votes: VoteUpdateManyWithoutVoterInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithoutVotesDataInput {
  displayName: String
  name: String
  avatar: String
  rep: Int
  points: Int
  giveableRep: Int
  color: String
  friends: MemberUpdateManyWithoutFriendsInput
  friendRequests: MemberUpdateManyWithoutFriendRequestsInput
  ignoredFriendRequests: MemberUpdateManyWithoutIgnoredFriendRequestsInput
  notifications: NotificationUpdateManyWithoutRecipientInput
  twitchName: String
  email: String
  passes: PassUpdateManyWithoutPasserInput
  createdThings: ThingUpdateManyWithoutAuthorInput
  ownedTags: TagUpdateManyWithoutAuthorInput
  defaultPrivacy: PrivacySetting
  defaultExpansion: Boolean
  broadcastView: Boolean
  comments: CommentUpdateManyWithoutAuthorInput
  password: String
  roles: MemberUpdaterolesInput
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: MemberUpdatetwitterSeenIDsInput
}

input MemberUpdateWithWhereUniqueWithoutFriendRequestsInput {
  where: MemberWhereUniqueInput!
  data: MemberUpdateWithoutFriendRequestsDataInput!
}

input MemberUpdateWithWhereUniqueWithoutFriendsInput {
  where: MemberWhereUniqueInput!
  data: MemberUpdateWithoutFriendsDataInput!
}

input MemberUpdateWithWhereUniqueWithoutIgnoredFriendRequestsInput {
  where: MemberWhereUniqueInput!
  data: MemberUpdateWithoutIgnoredFriendRequestsDataInput!
}

input MemberUpsertNestedInput {
  update: MemberUpdateDataInput!
  create: MemberCreateInput!
}

input MemberUpsertWithoutCommentsInput {
  update: MemberUpdateWithoutCommentsDataInput!
  create: MemberCreateWithoutCommentsInput!
}

input MemberUpsertWithoutCreatedThingsInput {
  update: MemberUpdateWithoutCreatedThingsDataInput!
  create: MemberCreateWithoutCreatedThingsInput!
}

input MemberUpsertWithoutNotificationsInput {
  update: MemberUpdateWithoutNotificationsDataInput!
  create: MemberCreateWithoutNotificationsInput!
}

input MemberUpsertWithoutOwnedTagsInput {
  update: MemberUpdateWithoutOwnedTagsDataInput!
  create: MemberCreateWithoutOwnedTagsInput!
}

input MemberUpsertWithoutPassesInput {
  update: MemberUpdateWithoutPassesDataInput!
  create: MemberCreateWithoutPassesInput!
}

input MemberUpsertWithoutVotesInput {
  update: MemberUpdateWithoutVotesDataInput!
  create: MemberCreateWithoutVotesInput!
}

input MemberUpsertWithWhereUniqueWithoutFriendRequestsInput {
  where: MemberWhereUniqueInput!
  update: MemberUpdateWithoutFriendRequestsDataInput!
  create: MemberCreateWithoutFriendRequestsInput!
}

input MemberUpsertWithWhereUniqueWithoutFriendsInput {
  where: MemberWhereUniqueInput!
  update: MemberUpdateWithoutFriendsDataInput!
  create: MemberCreateWithoutFriendsInput!
}

input MemberUpsertWithWhereUniqueWithoutIgnoredFriendRequestsInput {
  where: MemberWhereUniqueInput!
  update: MemberUpdateWithoutIgnoredFriendRequestsDataInput!
  create: MemberCreateWithoutIgnoredFriendRequestsInput!
}

input MemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  rep: Int
  rep_not: Int
  rep_in: [Int!]
  rep_not_in: [Int!]
  rep_lt: Int
  rep_lte: Int
  rep_gt: Int
  rep_gte: Int
  points: Int
  points_not: Int
  points_in: [Int!]
  points_not_in: [Int!]
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  giveableRep: Int
  giveableRep_not: Int
  giveableRep_in: [Int!]
  giveableRep_not_in: [Int!]
  giveableRep_lt: Int
  giveableRep_lte: Int
  giveableRep_gt: Int
  giveableRep_gte: Int
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  friends_every: MemberWhereInput
  friends_some: MemberWhereInput
  friends_none: MemberWhereInput
  friendRequests_every: MemberWhereInput
  friendRequests_some: MemberWhereInput
  friendRequests_none: MemberWhereInput
  ignoredFriendRequests_every: MemberWhereInput
  ignoredFriendRequests_some: MemberWhereInput
  ignoredFriendRequests_none: MemberWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  twitchName: String
  twitchName_not: String
  twitchName_in: [String!]
  twitchName_not_in: [String!]
  twitchName_lt: String
  twitchName_lte: String
  twitchName_gt: String
  twitchName_gte: String
  twitchName_contains: String
  twitchName_not_contains: String
  twitchName_starts_with: String
  twitchName_not_starts_with: String
  twitchName_ends_with: String
  twitchName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  passes_every: PassWhereInput
  passes_some: PassWhereInput
  passes_none: PassWhereInput
  createdThings_every: ThingWhereInput
  createdThings_some: ThingWhereInput
  createdThings_none: ThingWhereInput
  ownedTags_every: TagWhereInput
  ownedTags_some: TagWhereInput
  ownedTags_none: TagWhereInput
  defaultPrivacy: PrivacySetting
  defaultPrivacy_not: PrivacySetting
  defaultPrivacy_in: [PrivacySetting!]
  defaultPrivacy_not_in: [PrivacySetting!]
  defaultExpansion: Boolean
  defaultExpansion_not: Boolean
  broadcastView: Boolean
  broadcastView_not: Boolean
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  twitterTokenSecret: String
  twitterTokenSecret_not: String
  twitterTokenSecret_in: [String!]
  twitterTokenSecret_not_in: [String!]
  twitterTokenSecret_lt: String
  twitterTokenSecret_lte: String
  twitterTokenSecret_gt: String
  twitterTokenSecret_gte: String
  twitterTokenSecret_contains: String
  twitterTokenSecret_not_contains: String
  twitterTokenSecret_starts_with: String
  twitterTokenSecret_not_starts_with: String
  twitterTokenSecret_ends_with: String
  twitterTokenSecret_not_ends_with: String
  twitterUserName: String
  twitterUserName_not: String
  twitterUserName_in: [String!]
  twitterUserName_not_in: [String!]
  twitterUserName_lt: String
  twitterUserName_lte: String
  twitterUserName_gt: String
  twitterUserName_gte: String
  twitterUserName_contains: String
  twitterUserName_not_contains: String
  twitterUserName_starts_with: String
  twitterUserName_not_starts_with: String
  twitterUserName_ends_with: String
  twitterUserName_not_ends_with: String
  twitterUserID: String
  twitterUserID_not: String
  twitterUserID_in: [String!]
  twitterUserID_not_in: [String!]
  twitterUserID_lt: String
  twitterUserID_lte: String
  twitterUserID_gt: String
  twitterUserID_gte: String
  twitterUserID_contains: String
  twitterUserID_not_contains: String
  twitterUserID_starts_with: String
  twitterUserID_not_starts_with: String
  twitterUserID_ends_with: String
  twitterUserID_not_ends_with: String
  twitterUserToken: String
  twitterUserToken_not: String
  twitterUserToken_in: [String!]
  twitterUserToken_not_in: [String!]
  twitterUserToken_lt: String
  twitterUserToken_lte: String
  twitterUserToken_gt: String
  twitterUserToken_gte: String
  twitterUserToken_contains: String
  twitterUserToken_not_contains: String
  twitterUserToken_starts_with: String
  twitterUserToken_not_starts_with: String
  twitterUserToken_ends_with: String
  twitterUserToken_not_ends_with: String
  twitterUserTokenSecret: String
  twitterUserTokenSecret_not: String
  twitterUserTokenSecret_in: [String!]
  twitterUserTokenSecret_not_in: [String!]
  twitterUserTokenSecret_lt: String
  twitterUserTokenSecret_lte: String
  twitterUserTokenSecret_gt: String
  twitterUserTokenSecret_gte: String
  twitterUserTokenSecret_contains: String
  twitterUserTokenSecret_not_contains: String
  twitterUserTokenSecret_starts_with: String
  twitterUserTokenSecret_not_starts_with: String
  twitterUserTokenSecret_ends_with: String
  twitterUserTokenSecret_not_ends_with: String
  twitterListsObject: String
  twitterListsObject_not: String
  twitterListsObject_in: [String!]
  twitterListsObject_not_in: [String!]
  twitterListsObject_lt: String
  twitterListsObject_lte: String
  twitterListsObject_gt: String
  twitterListsObject_gte: String
  twitterListsObject_contains: String
  twitterListsObject_not_contains: String
  twitterListsObject_starts_with: String
  twitterListsObject_not_starts_with: String
  twitterListsObject_ends_with: String
  twitterListsObject_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
}

input MemberWhereUniqueInput {
  id: ID
  email: String
}

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createContentPiece(data: ContentPieceCreateInput!): ContentPiece!
  updateContentPiece(data: ContentPieceUpdateInput!, where: ContentPieceWhereUniqueInput!): ContentPiece
  updateManyContentPieces(data: ContentPieceUpdateManyMutationInput!, where: ContentPieceWhereInput): BatchPayload!
  upsertContentPiece(where: ContentPieceWhereUniqueInput!, create: ContentPieceCreateInput!, update: ContentPieceUpdateInput!): ContentPiece!
  deleteContentPiece(where: ContentPieceWhereUniqueInput!): ContentPiece
  deleteManyContentPieces(where: ContentPieceWhereInput): BatchPayload!
  createMember(data: MemberCreateInput!): Member!
  updateMember(data: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member
  updateManyMembers(data: MemberUpdateManyMutationInput!, where: MemberWhereInput): BatchPayload!
  upsertMember(where: MemberWhereUniqueInput!, create: MemberCreateInput!, update: MemberUpdateInput!): Member!
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteManyMembers(where: MemberWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createPass(data: PassCreateInput!): Pass!
  updatePass(data: PassUpdateInput!, where: PassWhereUniqueInput!): Pass
  upsertPass(where: PassWhereUniqueInput!, create: PassCreateInput!, update: PassUpdateInput!): Pass!
  deletePass(where: PassWhereUniqueInput!): Pass
  deleteManyPasses(where: PassWhereInput): BatchPayload!
  createStack(data: StackCreateInput!): Stack!
  updateStack(data: StackUpdateInput!, where: StackWhereUniqueInput!): Stack
  updateManyStacks(data: StackUpdateManyMutationInput!, where: StackWhereInput): BatchPayload!
  upsertStack(where: StackWhereUniqueInput!, create: StackCreateInput!, update: StackUpdateInput!): Stack!
  deleteStack(where: StackWhereUniqueInput!): Stack
  deleteManyStacks(where: StackWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createThing(data: ThingCreateInput!): Thing!
  updateThing(data: ThingUpdateInput!, where: ThingWhereUniqueInput!): Thing
  updateManyThings(data: ThingUpdateManyMutationInput!, where: ThingWhereInput): BatchPayload!
  upsertThing(where: ThingWhereUniqueInput!, create: ThingCreateInput!, update: ThingUpdateInput!): Thing!
  deleteThing(where: ThingWhereUniqueInput!): Thing
  deleteManyThings(where: ThingWhereInput): BatchPayload!
  createTweet(data: TweetCreateInput!): Tweet!
  updateTweet(data: TweetUpdateInput!, where: TweetWhereUniqueInput!): Tweet
  updateManyTweets(data: TweetUpdateManyMutationInput!, where: TweetWhereInput): BatchPayload!
  upsertTweet(where: TweetWhereUniqueInput!, create: TweetCreateInput!, update: TweetUpdateInput!): Tweet!
  deleteTweet(where: TweetWhereUniqueInput!): Tweet
  deleteManyTweets(where: TweetWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateManyVotes(data: VoteUpdateManyMutationInput!, where: VoteWhereInput): BatchPayload!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  kind: String!
  recipient: Member!
  initiator: Member!
  unread: Boolean!
  linkQuery: String
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  kind: String!
  recipient: MemberCreateOneWithoutNotificationsInput!
  initiator: MemberCreateOneInput!
  unread: Boolean
  linkQuery: String
}

input NotificationCreateManyWithoutRecipientInput {
  create: [NotificationCreateWithoutRecipientInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutRecipientInput {
  id: ID
  kind: String!
  initiator: MemberCreateOneInput!
  unread: Boolean
  linkQuery: String
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  kind_ASC
  kind_DESC
  unread_ASC
  unread_DESC
  linkQuery_ASC
  linkQuery_DESC
}

type NotificationPreviousValues {
  id: ID!
  kind: String!
  unread: Boolean!
  linkQuery: String
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  kind: String
  kind_not: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_lt: String
  kind_lte: String
  kind_gt: String
  kind_gte: String
  kind_contains: String
  kind_not_contains: String
  kind_starts_with: String
  kind_not_starts_with: String
  kind_ends_with: String
  kind_not_ends_with: String
  unread: Boolean
  unread_not: Boolean
  linkQuery: String
  linkQuery_not: String
  linkQuery_in: [String!]
  linkQuery_not_in: [String!]
  linkQuery_lt: String
  linkQuery_lte: String
  linkQuery_gt: String
  linkQuery_gte: String
  linkQuery_contains: String
  linkQuery_not_contains: String
  linkQuery_starts_with: String
  linkQuery_not_starts_with: String
  linkQuery_ends_with: String
  linkQuery_not_ends_with: String
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateInput {
  kind: String
  recipient: MemberUpdateOneRequiredWithoutNotificationsInput
  initiator: MemberUpdateOneRequiredInput
  unread: Boolean
  linkQuery: String
}

input NotificationUpdateManyDataInput {
  kind: String
  unread: Boolean
  linkQuery: String
}

input NotificationUpdateManyMutationInput {
  kind: String
  unread: Boolean
  linkQuery: String
}

input NotificationUpdateManyWithoutRecipientInput {
  create: [NotificationCreateWithoutRecipientInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutRecipientInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutRecipientInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateWithoutRecipientDataInput {
  kind: String
  initiator: MemberUpdateOneRequiredInput
  unread: Boolean
  linkQuery: String
}

input NotificationUpdateWithWhereUniqueWithoutRecipientInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutRecipientDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutRecipientInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutRecipientDataInput!
  create: NotificationCreateWithoutRecipientInput!
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  kind: String
  kind_not: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_lt: String
  kind_lte: String
  kind_gt: String
  kind_gte: String
  kind_contains: String
  kind_not_contains: String
  kind_starts_with: String
  kind_not_starts_with: String
  kind_ends_with: String
  kind_not_ends_with: String
  recipient: MemberWhereInput
  initiator: MemberWhereInput
  unread: Boolean
  unread_not: Boolean
  linkQuery: String
  linkQuery_not: String
  linkQuery_in: [String!]
  linkQuery_not_in: [String!]
  linkQuery_lt: String
  linkQuery_lte: String
  linkQuery_gt: String
  linkQuery_gte: String
  linkQuery_contains: String
  linkQuery_not_contains: String
  linkQuery_starts_with: String
  linkQuery_not_starts_with: String
  linkQuery_ends_with: String
  linkQuery_not_ends_with: String
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pass {
  id: ID!
  passer: Member!
  onThing: Thing
  createdAt: DateTime!
}

type PassConnection {
  pageInfo: PageInfo!
  edges: [PassEdge]!
  aggregate: AggregatePass!
}

input PassCreateInput {
  id: ID
  passer: MemberCreateOneWithoutPassesInput!
  onThing: ThingCreateOneWithoutPassesInput
}

input PassCreateManyWithoutOnThingInput {
  create: [PassCreateWithoutOnThingInput!]
  connect: [PassWhereUniqueInput!]
}

input PassCreateManyWithoutPasserInput {
  create: [PassCreateWithoutPasserInput!]
  connect: [PassWhereUniqueInput!]
}

input PassCreateWithoutOnThingInput {
  id: ID
  passer: MemberCreateOneWithoutPassesInput!
}

input PassCreateWithoutPasserInput {
  id: ID
  onThing: ThingCreateOneWithoutPassesInput
}

type PassEdge {
  node: Pass!
  cursor: String!
}

enum PassOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type PassPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input PassScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PassScalarWhereInput!]
  OR: [PassScalarWhereInput!]
  NOT: [PassScalarWhereInput!]
}

type PassSubscriptionPayload {
  mutation: MutationType!
  node: Pass
  updatedFields: [String!]
  previousValues: PassPreviousValues
}

input PassSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PassWhereInput
  AND: [PassSubscriptionWhereInput!]
  OR: [PassSubscriptionWhereInput!]
  NOT: [PassSubscriptionWhereInput!]
}

input PassUpdateInput {
  passer: MemberUpdateOneRequiredWithoutPassesInput
  onThing: ThingUpdateOneWithoutPassesInput
}

input PassUpdateManyWithoutOnThingInput {
  create: [PassCreateWithoutOnThingInput!]
  delete: [PassWhereUniqueInput!]
  connect: [PassWhereUniqueInput!]
  set: [PassWhereUniqueInput!]
  disconnect: [PassWhereUniqueInput!]
  update: [PassUpdateWithWhereUniqueWithoutOnThingInput!]
  upsert: [PassUpsertWithWhereUniqueWithoutOnThingInput!]
  deleteMany: [PassScalarWhereInput!]
}

input PassUpdateManyWithoutPasserInput {
  create: [PassCreateWithoutPasserInput!]
  delete: [PassWhereUniqueInput!]
  connect: [PassWhereUniqueInput!]
  set: [PassWhereUniqueInput!]
  disconnect: [PassWhereUniqueInput!]
  update: [PassUpdateWithWhereUniqueWithoutPasserInput!]
  upsert: [PassUpsertWithWhereUniqueWithoutPasserInput!]
  deleteMany: [PassScalarWhereInput!]
}

input PassUpdateWithoutOnThingDataInput {
  passer: MemberUpdateOneRequiredWithoutPassesInput
}

input PassUpdateWithoutPasserDataInput {
  onThing: ThingUpdateOneWithoutPassesInput
}

input PassUpdateWithWhereUniqueWithoutOnThingInput {
  where: PassWhereUniqueInput!
  data: PassUpdateWithoutOnThingDataInput!
}

input PassUpdateWithWhereUniqueWithoutPasserInput {
  where: PassWhereUniqueInput!
  data: PassUpdateWithoutPasserDataInput!
}

input PassUpsertWithWhereUniqueWithoutOnThingInput {
  where: PassWhereUniqueInput!
  update: PassUpdateWithoutOnThingDataInput!
  create: PassCreateWithoutOnThingInput!
}

input PassUpsertWithWhereUniqueWithoutPasserInput {
  where: PassWhereUniqueInput!
  update: PassUpdateWithoutPasserDataInput!
  create: PassCreateWithoutPasserInput!
}

input PassWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  passer: MemberWhereInput
  onThing: ThingWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PassWhereInput!]
  OR: [PassWhereInput!]
  NOT: [PassWhereInput!]
}

input PassWhereUniqueInput {
  id: ID
}

enum PrivacySetting {
  Public
  Private
  Friends
  FriendsOfFriends
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  contentPiece(where: ContentPieceWhereUniqueInput!): ContentPiece
  contentPieces(where: ContentPieceWhereInput, orderBy: ContentPieceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentPiece]!
  contentPiecesConnection(where: ContentPieceWhereInput, orderBy: ContentPieceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContentPieceConnection!
  member(where: MemberWhereUniqueInput!): Member
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member]!
  membersConnection(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  pass(where: PassWhereUniqueInput!): Pass
  passes(where: PassWhereInput, orderBy: PassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pass]!
  passesConnection(where: PassWhereInput, orderBy: PassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PassConnection!
  stack(where: StackWhereUniqueInput!): Stack
  stacks(where: StackWhereInput, orderBy: StackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stack]!
  stacksConnection(where: StackWhereInput, orderBy: StackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StackConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  thing(where: ThingWhereUniqueInput!): Thing
  things(where: ThingWhereInput, orderBy: ThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thing]!
  thingsConnection(where: ThingWhereInput, orderBy: ThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThingConnection!
  tweet(where: TweetWhereUniqueInput!): Tweet
  tweets(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tweet]!
  tweetsConnection(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TweetConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

enum Role {
  Admin
  Editor
  Moderator
  Member
  LiteMember
}

type Stack {
  id: ID!
  title: String!
  author: Member!
  featuredImage: String
  content(where: ContentPieceWhereInput, orderBy: ContentPieceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentPiece!]
  contentOrder: [String!]!
  connectedThings(where: ThingWhereInput, orderBy: ThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thing!]
  color: String
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime
}

type StackConnection {
  pageInfo: PageInfo!
  edges: [StackEdge]!
  aggregate: AggregateStack!
}

input StackCreatecontentOrderInput {
  set: [String!]
}

input StackCreateInput {
  id: ID
  title: String!
  author: MemberCreateOneInput!
  featuredImage: String
  content: ContentPieceCreateManyInput
  contentOrder: StackCreatecontentOrderInput
  connectedThings: ThingCreateManyWithoutPartOfStacksInput
  color: String
  comments: CommentCreateManyInput
}

input StackCreateManyWithoutConnectedThingsInput {
  create: [StackCreateWithoutConnectedThingsInput!]
  connect: [StackWhereUniqueInput!]
}

input StackCreateWithoutConnectedThingsInput {
  id: ID
  title: String!
  author: MemberCreateOneInput!
  featuredImage: String
  content: ContentPieceCreateManyInput
  contentOrder: StackCreatecontentOrderInput
  color: String
  comments: CommentCreateManyInput
}

type StackEdge {
  node: Stack!
  cursor: String!
}

enum StackOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  featuredImage_ASC
  featuredImage_DESC
  color_ASC
  color_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StackPreviousValues {
  id: ID!
  title: String!
  featuredImage: String
  contentOrder: [String!]!
  color: String
  createdAt: DateTime!
  updatedAt: DateTime
}

input StackScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StackScalarWhereInput!]
  OR: [StackScalarWhereInput!]
  NOT: [StackScalarWhereInput!]
}

type StackSubscriptionPayload {
  mutation: MutationType!
  node: Stack
  updatedFields: [String!]
  previousValues: StackPreviousValues
}

input StackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StackWhereInput
  AND: [StackSubscriptionWhereInput!]
  OR: [StackSubscriptionWhereInput!]
  NOT: [StackSubscriptionWhereInput!]
}

input StackUpdatecontentOrderInput {
  set: [String!]
}

input StackUpdateInput {
  title: String
  author: MemberUpdateOneRequiredInput
  featuredImage: String
  content: ContentPieceUpdateManyInput
  contentOrder: StackUpdatecontentOrderInput
  connectedThings: ThingUpdateManyWithoutPartOfStacksInput
  color: String
  comments: CommentUpdateManyInput
}

input StackUpdateManyDataInput {
  title: String
  featuredImage: String
  contentOrder: StackUpdatecontentOrderInput
  color: String
}

input StackUpdateManyMutationInput {
  title: String
  featuredImage: String
  contentOrder: StackUpdatecontentOrderInput
  color: String
}

input StackUpdateManyWithoutConnectedThingsInput {
  create: [StackCreateWithoutConnectedThingsInput!]
  delete: [StackWhereUniqueInput!]
  connect: [StackWhereUniqueInput!]
  set: [StackWhereUniqueInput!]
  disconnect: [StackWhereUniqueInput!]
  update: [StackUpdateWithWhereUniqueWithoutConnectedThingsInput!]
  upsert: [StackUpsertWithWhereUniqueWithoutConnectedThingsInput!]
  deleteMany: [StackScalarWhereInput!]
  updateMany: [StackUpdateManyWithWhereNestedInput!]
}

input StackUpdateManyWithWhereNestedInput {
  where: StackScalarWhereInput!
  data: StackUpdateManyDataInput!
}

input StackUpdateWithoutConnectedThingsDataInput {
  title: String
  author: MemberUpdateOneRequiredInput
  featuredImage: String
  content: ContentPieceUpdateManyInput
  contentOrder: StackUpdatecontentOrderInput
  color: String
  comments: CommentUpdateManyInput
}

input StackUpdateWithWhereUniqueWithoutConnectedThingsInput {
  where: StackWhereUniqueInput!
  data: StackUpdateWithoutConnectedThingsDataInput!
}

input StackUpsertWithWhereUniqueWithoutConnectedThingsInput {
  where: StackWhereUniqueInput!
  update: StackUpdateWithoutConnectedThingsDataInput!
  create: StackCreateWithoutConnectedThingsInput!
}

input StackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: MemberWhereInput
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  content_every: ContentPieceWhereInput
  content_some: ContentPieceWhereInput
  content_none: ContentPieceWhereInput
  connectedThings_every: ThingWhereInput
  connectedThings_some: ThingWhereInput
  connectedThings_none: ThingWhereInput
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StackWhereInput!]
  OR: [StackWhereInput!]
  NOT: [StackWhereInput!]
}

input StackWhereUniqueInput {
  id: ID
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  contentPiece(where: ContentPieceSubscriptionWhereInput): ContentPieceSubscriptionPayload
  member(where: MemberSubscriptionWhereInput): MemberSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  pass(where: PassSubscriptionWhereInput): PassSubscriptionPayload
  stack(where: StackSubscriptionWhereInput): StackSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  thing(where: ThingSubscriptionWhereInput): ThingSubscriptionPayload
  tweet(where: TweetSubscriptionWhereInput): TweetSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type Tag {
  id: ID!
  title: String!
  author: Member!
  featuredImage: String
  content(where: ContentPieceWhereInput, orderBy: ContentPieceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentPiece!]
  contentOrder: [String!]!
  connectedThings(where: ThingWhereInput, orderBy: ThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thing!]
  color: String
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreatecontentOrderInput {
  set: [String!]
}

input TagCreateInput {
  id: ID
  title: String!
  author: MemberCreateOneWithoutOwnedTagsInput!
  featuredImage: String
  content: ContentPieceCreateManyWithoutOnTagInput
  contentOrder: TagCreatecontentOrderInput
  connectedThings: ThingCreateManyWithoutPartOfTagsInput
  color: String
  comments: CommentCreateManyWithoutOnTagInput
}

input TagCreateManyWithoutAuthorInput {
  create: [TagCreateWithoutAuthorInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutConnectedThingsInput {
  create: [TagCreateWithoutConnectedThingsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateOneWithoutCommentsInput {
  create: TagCreateWithoutCommentsInput
  connect: TagWhereUniqueInput
}

input TagCreateOneWithoutContentInput {
  create: TagCreateWithoutContentInput
  connect: TagWhereUniqueInput
}

input TagCreateWithoutAuthorInput {
  id: ID
  title: String!
  featuredImage: String
  content: ContentPieceCreateManyWithoutOnTagInput
  contentOrder: TagCreatecontentOrderInput
  connectedThings: ThingCreateManyWithoutPartOfTagsInput
  color: String
  comments: CommentCreateManyWithoutOnTagInput
}

input TagCreateWithoutCommentsInput {
  id: ID
  title: String!
  author: MemberCreateOneWithoutOwnedTagsInput!
  featuredImage: String
  content: ContentPieceCreateManyWithoutOnTagInput
  contentOrder: TagCreatecontentOrderInput
  connectedThings: ThingCreateManyWithoutPartOfTagsInput
  color: String
}

input TagCreateWithoutConnectedThingsInput {
  id: ID
  title: String!
  author: MemberCreateOneWithoutOwnedTagsInput!
  featuredImage: String
  content: ContentPieceCreateManyWithoutOnTagInput
  contentOrder: TagCreatecontentOrderInput
  color: String
  comments: CommentCreateManyWithoutOnTagInput
}

input TagCreateWithoutContentInput {
  id: ID
  title: String!
  author: MemberCreateOneWithoutOwnedTagsInput!
  featuredImage: String
  contentOrder: TagCreatecontentOrderInput
  connectedThings: ThingCreateManyWithoutPartOfTagsInput
  color: String
  comments: CommentCreateManyWithoutOnTagInput
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  featuredImage_ASC
  featuredImage_DESC
  color_ASC
  color_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TagPreviousValues {
  id: ID!
  title: String!
  featuredImage: String
  contentOrder: [String!]!
  color: String
  createdAt: DateTime!
  updatedAt: DateTime
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdatecontentOrderInput {
  set: [String!]
}

input TagUpdateInput {
  title: String
  author: MemberUpdateOneRequiredWithoutOwnedTagsInput
  featuredImage: String
  content: ContentPieceUpdateManyWithoutOnTagInput
  contentOrder: TagUpdatecontentOrderInput
  connectedThings: ThingUpdateManyWithoutPartOfTagsInput
  color: String
  comments: CommentUpdateManyWithoutOnTagInput
}

input TagUpdateManyDataInput {
  title: String
  featuredImage: String
  contentOrder: TagUpdatecontentOrderInput
  color: String
}

input TagUpdateManyMutationInput {
  title: String
  featuredImage: String
  contentOrder: TagUpdatecontentOrderInput
  color: String
}

input TagUpdateManyWithoutAuthorInput {
  create: [TagCreateWithoutAuthorInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutConnectedThingsInput {
  create: [TagCreateWithoutConnectedThingsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutConnectedThingsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutConnectedThingsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateOneWithoutCommentsInput {
  create: TagCreateWithoutCommentsInput
  update: TagUpdateWithoutCommentsDataInput
  upsert: TagUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: TagWhereUniqueInput
}

input TagUpdateOneWithoutContentInput {
  create: TagCreateWithoutContentInput
  update: TagUpdateWithoutContentDataInput
  upsert: TagUpsertWithoutContentInput
  delete: Boolean
  disconnect: Boolean
  connect: TagWhereUniqueInput
}

input TagUpdateWithoutAuthorDataInput {
  title: String
  featuredImage: String
  content: ContentPieceUpdateManyWithoutOnTagInput
  contentOrder: TagUpdatecontentOrderInput
  connectedThings: ThingUpdateManyWithoutPartOfTagsInput
  color: String
  comments: CommentUpdateManyWithoutOnTagInput
}

input TagUpdateWithoutCommentsDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutOwnedTagsInput
  featuredImage: String
  content: ContentPieceUpdateManyWithoutOnTagInput
  contentOrder: TagUpdatecontentOrderInput
  connectedThings: ThingUpdateManyWithoutPartOfTagsInput
  color: String
}

input TagUpdateWithoutConnectedThingsDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutOwnedTagsInput
  featuredImage: String
  content: ContentPieceUpdateManyWithoutOnTagInput
  contentOrder: TagUpdatecontentOrderInput
  color: String
  comments: CommentUpdateManyWithoutOnTagInput
}

input TagUpdateWithoutContentDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutOwnedTagsInput
  featuredImage: String
  contentOrder: TagUpdatecontentOrderInput
  connectedThings: ThingUpdateManyWithoutPartOfTagsInput
  color: String
  comments: CommentUpdateManyWithoutOnTagInput
}

input TagUpdateWithWhereUniqueWithoutAuthorInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutAuthorDataInput!
}

input TagUpdateWithWhereUniqueWithoutConnectedThingsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutConnectedThingsDataInput!
}

input TagUpsertWithoutCommentsInput {
  update: TagUpdateWithoutCommentsDataInput!
  create: TagCreateWithoutCommentsInput!
}

input TagUpsertWithoutContentInput {
  update: TagUpdateWithoutContentDataInput!
  create: TagCreateWithoutContentInput!
}

input TagUpsertWithWhereUniqueWithoutAuthorInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutAuthorDataInput!
  create: TagCreateWithoutAuthorInput!
}

input TagUpsertWithWhereUniqueWithoutConnectedThingsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutConnectedThingsDataInput!
  create: TagCreateWithoutConnectedThingsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: MemberWhereInput
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  content_every: ContentPieceWhereInput
  content_some: ContentPieceWhereInput
  content_none: ContentPieceWhereInput
  connectedThings_every: ThingWhereInput
  connectedThings_some: ThingWhereInput
  connectedThings_none: ThingWhereInput
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  title: String
}

type Thing {
  id: ID!
  title: String!
  author: Member!
  featuredImage: String
  link: String
  content(where: ContentPieceWhereInput, orderBy: ContentPieceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentPiece!]
  copiedInContent(where: ContentPieceWhereInput, orderBy: ContentPieceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentPiece!]
  contentOrder: [String!]!
  summary: String
  partOfTags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  partOfStacks(where: StackWhereInput, orderBy: StackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stack!]
  color: String
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  passes(where: PassWhereInput, orderBy: PassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pass!]
  score: Int!
  winner: DateTime
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  eliminated: Boolean!
  finalistDate: DateTime
  privacy: PrivacySetting
  createdAt: DateTime!
  updatedAt: DateTime
}

type ThingConnection {
  pageInfo: PageInfo!
  edges: [ThingEdge]!
  aggregate: AggregateThing!
}

input ThingCreatecontentOrderInput {
  set: [String!]
}

input ThingCreateInput {
  id: ID
  title: String
  author: MemberCreateOneWithoutCreatedThingsInput!
  featuredImage: String
  link: String
  content: ContentPieceCreateManyWithoutOnThingInput
  copiedInContent: ContentPieceCreateManyWithoutCopiedToThingsInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfTags: TagCreateManyWithoutConnectedThingsInput
  partOfStacks: StackCreateManyWithoutConnectedThingsInput
  color: String
  votes: VoteCreateManyWithoutOnThingInput
  passes: PassCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentCreateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingCreateManyWithoutAuthorInput {
  create: [ThingCreateWithoutAuthorInput!]
  connect: [ThingWhereUniqueInput!]
}

input ThingCreateManyWithoutCopiedInContentInput {
  create: [ThingCreateWithoutCopiedInContentInput!]
  connect: [ThingWhereUniqueInput!]
}

input ThingCreateManyWithoutPartOfStacksInput {
  create: [ThingCreateWithoutPartOfStacksInput!]
  connect: [ThingWhereUniqueInput!]
}

input ThingCreateManyWithoutPartOfTagsInput {
  create: [ThingCreateWithoutPartOfTagsInput!]
  connect: [ThingWhereUniqueInput!]
}

input ThingCreateOneWithoutCommentsInput {
  create: ThingCreateWithoutCommentsInput
  connect: ThingWhereUniqueInput
}

input ThingCreateOneWithoutContentInput {
  create: ThingCreateWithoutContentInput
  connect: ThingWhereUniqueInput
}

input ThingCreateOneWithoutPassesInput {
  create: ThingCreateWithoutPassesInput
  connect: ThingWhereUniqueInput
}

input ThingCreateOneWithoutVotesInput {
  create: ThingCreateWithoutVotesInput
  connect: ThingWhereUniqueInput
}

input ThingCreateWithoutAuthorInput {
  id: ID
  title: String
  featuredImage: String
  link: String
  content: ContentPieceCreateManyWithoutOnThingInput
  copiedInContent: ContentPieceCreateManyWithoutCopiedToThingsInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfTags: TagCreateManyWithoutConnectedThingsInput
  partOfStacks: StackCreateManyWithoutConnectedThingsInput
  color: String
  votes: VoteCreateManyWithoutOnThingInput
  passes: PassCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentCreateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingCreateWithoutCommentsInput {
  id: ID
  title: String
  author: MemberCreateOneWithoutCreatedThingsInput!
  featuredImage: String
  link: String
  content: ContentPieceCreateManyWithoutOnThingInput
  copiedInContent: ContentPieceCreateManyWithoutCopiedToThingsInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfTags: TagCreateManyWithoutConnectedThingsInput
  partOfStacks: StackCreateManyWithoutConnectedThingsInput
  color: String
  votes: VoteCreateManyWithoutOnThingInput
  passes: PassCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingCreateWithoutContentInput {
  id: ID
  title: String
  author: MemberCreateOneWithoutCreatedThingsInput!
  featuredImage: String
  link: String
  copiedInContent: ContentPieceCreateManyWithoutCopiedToThingsInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfTags: TagCreateManyWithoutConnectedThingsInput
  partOfStacks: StackCreateManyWithoutConnectedThingsInput
  color: String
  votes: VoteCreateManyWithoutOnThingInput
  passes: PassCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentCreateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingCreateWithoutCopiedInContentInput {
  id: ID
  title: String
  author: MemberCreateOneWithoutCreatedThingsInput!
  featuredImage: String
  link: String
  content: ContentPieceCreateManyWithoutOnThingInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfTags: TagCreateManyWithoutConnectedThingsInput
  partOfStacks: StackCreateManyWithoutConnectedThingsInput
  color: String
  votes: VoteCreateManyWithoutOnThingInput
  passes: PassCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentCreateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingCreateWithoutPartOfStacksInput {
  id: ID
  title: String
  author: MemberCreateOneWithoutCreatedThingsInput!
  featuredImage: String
  link: String
  content: ContentPieceCreateManyWithoutOnThingInput
  copiedInContent: ContentPieceCreateManyWithoutCopiedToThingsInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfTags: TagCreateManyWithoutConnectedThingsInput
  color: String
  votes: VoteCreateManyWithoutOnThingInput
  passes: PassCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentCreateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingCreateWithoutPartOfTagsInput {
  id: ID
  title: String
  author: MemberCreateOneWithoutCreatedThingsInput!
  featuredImage: String
  link: String
  content: ContentPieceCreateManyWithoutOnThingInput
  copiedInContent: ContentPieceCreateManyWithoutCopiedToThingsInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfStacks: StackCreateManyWithoutConnectedThingsInput
  color: String
  votes: VoteCreateManyWithoutOnThingInput
  passes: PassCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentCreateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingCreateWithoutPassesInput {
  id: ID
  title: String
  author: MemberCreateOneWithoutCreatedThingsInput!
  featuredImage: String
  link: String
  content: ContentPieceCreateManyWithoutOnThingInput
  copiedInContent: ContentPieceCreateManyWithoutCopiedToThingsInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfTags: TagCreateManyWithoutConnectedThingsInput
  partOfStacks: StackCreateManyWithoutConnectedThingsInput
  color: String
  votes: VoteCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentCreateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingCreateWithoutVotesInput {
  id: ID
  title: String
  author: MemberCreateOneWithoutCreatedThingsInput!
  featuredImage: String
  link: String
  content: ContentPieceCreateManyWithoutOnThingInput
  copiedInContent: ContentPieceCreateManyWithoutCopiedToThingsInput
  contentOrder: ThingCreatecontentOrderInput
  summary: String
  partOfTags: TagCreateManyWithoutConnectedThingsInput
  partOfStacks: StackCreateManyWithoutConnectedThingsInput
  color: String
  passes: PassCreateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentCreateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

type ThingEdge {
  node: Thing!
  cursor: String!
}

enum ThingOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  featuredImage_ASC
  featuredImage_DESC
  link_ASC
  link_DESC
  summary_ASC
  summary_DESC
  color_ASC
  color_DESC
  score_ASC
  score_DESC
  winner_ASC
  winner_DESC
  eliminated_ASC
  eliminated_DESC
  finalistDate_ASC
  finalistDate_DESC
  privacy_ASC
  privacy_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ThingPreviousValues {
  id: ID!
  title: String!
  featuredImage: String
  link: String
  contentOrder: [String!]!
  summary: String
  color: String
  score: Int!
  winner: DateTime
  eliminated: Boolean!
  finalistDate: DateTime
  privacy: PrivacySetting
  createdAt: DateTime!
  updatedAt: DateTime
}

input ThingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  winner: DateTime
  winner_not: DateTime
  winner_in: [DateTime!]
  winner_not_in: [DateTime!]
  winner_lt: DateTime
  winner_lte: DateTime
  winner_gt: DateTime
  winner_gte: DateTime
  eliminated: Boolean
  eliminated_not: Boolean
  finalistDate: DateTime
  finalistDate_not: DateTime
  finalistDate_in: [DateTime!]
  finalistDate_not_in: [DateTime!]
  finalistDate_lt: DateTime
  finalistDate_lte: DateTime
  finalistDate_gt: DateTime
  finalistDate_gte: DateTime
  privacy: PrivacySetting
  privacy_not: PrivacySetting
  privacy_in: [PrivacySetting!]
  privacy_not_in: [PrivacySetting!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ThingScalarWhereInput!]
  OR: [ThingScalarWhereInput!]
  NOT: [ThingScalarWhereInput!]
}

type ThingSubscriptionPayload {
  mutation: MutationType!
  node: Thing
  updatedFields: [String!]
  previousValues: ThingPreviousValues
}

input ThingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThingWhereInput
  AND: [ThingSubscriptionWhereInput!]
  OR: [ThingSubscriptionWhereInput!]
  NOT: [ThingSubscriptionWhereInput!]
}

input ThingUpdatecontentOrderInput {
  set: [String!]
}

input ThingUpdateInput {
  title: String
  author: MemberUpdateOneRequiredWithoutCreatedThingsInput
  featuredImage: String
  link: String
  content: ContentPieceUpdateManyWithoutOnThingInput
  copiedInContent: ContentPieceUpdateManyWithoutCopiedToThingsInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfTags: TagUpdateManyWithoutConnectedThingsInput
  partOfStacks: StackUpdateManyWithoutConnectedThingsInput
  color: String
  votes: VoteUpdateManyWithoutOnThingInput
  passes: PassUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentUpdateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateManyDataInput {
  title: String
  featuredImage: String
  link: String
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  color: String
  score: Int
  winner: DateTime
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateManyMutationInput {
  title: String
  featuredImage: String
  link: String
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  color: String
  score: Int
  winner: DateTime
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateManyWithoutAuthorInput {
  create: [ThingCreateWithoutAuthorInput!]
  delete: [ThingWhereUniqueInput!]
  connect: [ThingWhereUniqueInput!]
  set: [ThingWhereUniqueInput!]
  disconnect: [ThingWhereUniqueInput!]
  update: [ThingUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ThingUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [ThingScalarWhereInput!]
  updateMany: [ThingUpdateManyWithWhereNestedInput!]
}

input ThingUpdateManyWithoutCopiedInContentInput {
  create: [ThingCreateWithoutCopiedInContentInput!]
  delete: [ThingWhereUniqueInput!]
  connect: [ThingWhereUniqueInput!]
  set: [ThingWhereUniqueInput!]
  disconnect: [ThingWhereUniqueInput!]
  update: [ThingUpdateWithWhereUniqueWithoutCopiedInContentInput!]
  upsert: [ThingUpsertWithWhereUniqueWithoutCopiedInContentInput!]
  deleteMany: [ThingScalarWhereInput!]
  updateMany: [ThingUpdateManyWithWhereNestedInput!]
}

input ThingUpdateManyWithoutPartOfStacksInput {
  create: [ThingCreateWithoutPartOfStacksInput!]
  delete: [ThingWhereUniqueInput!]
  connect: [ThingWhereUniqueInput!]
  set: [ThingWhereUniqueInput!]
  disconnect: [ThingWhereUniqueInput!]
  update: [ThingUpdateWithWhereUniqueWithoutPartOfStacksInput!]
  upsert: [ThingUpsertWithWhereUniqueWithoutPartOfStacksInput!]
  deleteMany: [ThingScalarWhereInput!]
  updateMany: [ThingUpdateManyWithWhereNestedInput!]
}

input ThingUpdateManyWithoutPartOfTagsInput {
  create: [ThingCreateWithoutPartOfTagsInput!]
  delete: [ThingWhereUniqueInput!]
  connect: [ThingWhereUniqueInput!]
  set: [ThingWhereUniqueInput!]
  disconnect: [ThingWhereUniqueInput!]
  update: [ThingUpdateWithWhereUniqueWithoutPartOfTagsInput!]
  upsert: [ThingUpsertWithWhereUniqueWithoutPartOfTagsInput!]
  deleteMany: [ThingScalarWhereInput!]
  updateMany: [ThingUpdateManyWithWhereNestedInput!]
}

input ThingUpdateManyWithWhereNestedInput {
  where: ThingScalarWhereInput!
  data: ThingUpdateManyDataInput!
}

input ThingUpdateOneWithoutCommentsInput {
  create: ThingCreateWithoutCommentsInput
  update: ThingUpdateWithoutCommentsDataInput
  upsert: ThingUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: ThingWhereUniqueInput
}

input ThingUpdateOneWithoutContentInput {
  create: ThingCreateWithoutContentInput
  update: ThingUpdateWithoutContentDataInput
  upsert: ThingUpsertWithoutContentInput
  delete: Boolean
  disconnect: Boolean
  connect: ThingWhereUniqueInput
}

input ThingUpdateOneWithoutPassesInput {
  create: ThingCreateWithoutPassesInput
  update: ThingUpdateWithoutPassesDataInput
  upsert: ThingUpsertWithoutPassesInput
  delete: Boolean
  disconnect: Boolean
  connect: ThingWhereUniqueInput
}

input ThingUpdateOneWithoutVotesInput {
  create: ThingCreateWithoutVotesInput
  update: ThingUpdateWithoutVotesDataInput
  upsert: ThingUpsertWithoutVotesInput
  delete: Boolean
  disconnect: Boolean
  connect: ThingWhereUniqueInput
}

input ThingUpdateWithoutAuthorDataInput {
  title: String
  featuredImage: String
  link: String
  content: ContentPieceUpdateManyWithoutOnThingInput
  copiedInContent: ContentPieceUpdateManyWithoutCopiedToThingsInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfTags: TagUpdateManyWithoutConnectedThingsInput
  partOfStacks: StackUpdateManyWithoutConnectedThingsInput
  color: String
  votes: VoteUpdateManyWithoutOnThingInput
  passes: PassUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentUpdateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateWithoutCommentsDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutCreatedThingsInput
  featuredImage: String
  link: String
  content: ContentPieceUpdateManyWithoutOnThingInput
  copiedInContent: ContentPieceUpdateManyWithoutCopiedToThingsInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfTags: TagUpdateManyWithoutConnectedThingsInput
  partOfStacks: StackUpdateManyWithoutConnectedThingsInput
  color: String
  votes: VoteUpdateManyWithoutOnThingInput
  passes: PassUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateWithoutContentDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutCreatedThingsInput
  featuredImage: String
  link: String
  copiedInContent: ContentPieceUpdateManyWithoutCopiedToThingsInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfTags: TagUpdateManyWithoutConnectedThingsInput
  partOfStacks: StackUpdateManyWithoutConnectedThingsInput
  color: String
  votes: VoteUpdateManyWithoutOnThingInput
  passes: PassUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentUpdateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateWithoutCopiedInContentDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutCreatedThingsInput
  featuredImage: String
  link: String
  content: ContentPieceUpdateManyWithoutOnThingInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfTags: TagUpdateManyWithoutConnectedThingsInput
  partOfStacks: StackUpdateManyWithoutConnectedThingsInput
  color: String
  votes: VoteUpdateManyWithoutOnThingInput
  passes: PassUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentUpdateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateWithoutPartOfStacksDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutCreatedThingsInput
  featuredImage: String
  link: String
  content: ContentPieceUpdateManyWithoutOnThingInput
  copiedInContent: ContentPieceUpdateManyWithoutCopiedToThingsInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfTags: TagUpdateManyWithoutConnectedThingsInput
  color: String
  votes: VoteUpdateManyWithoutOnThingInput
  passes: PassUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentUpdateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateWithoutPartOfTagsDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutCreatedThingsInput
  featuredImage: String
  link: String
  content: ContentPieceUpdateManyWithoutOnThingInput
  copiedInContent: ContentPieceUpdateManyWithoutCopiedToThingsInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfStacks: StackUpdateManyWithoutConnectedThingsInput
  color: String
  votes: VoteUpdateManyWithoutOnThingInput
  passes: PassUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentUpdateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateWithoutPassesDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutCreatedThingsInput
  featuredImage: String
  link: String
  content: ContentPieceUpdateManyWithoutOnThingInput
  copiedInContent: ContentPieceUpdateManyWithoutCopiedToThingsInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfTags: TagUpdateManyWithoutConnectedThingsInput
  partOfStacks: StackUpdateManyWithoutConnectedThingsInput
  color: String
  votes: VoteUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentUpdateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateWithoutVotesDataInput {
  title: String
  author: MemberUpdateOneRequiredWithoutCreatedThingsInput
  featuredImage: String
  link: String
  content: ContentPieceUpdateManyWithoutOnThingInput
  copiedInContent: ContentPieceUpdateManyWithoutCopiedToThingsInput
  contentOrder: ThingUpdatecontentOrderInput
  summary: String
  partOfTags: TagUpdateManyWithoutConnectedThingsInput
  partOfStacks: StackUpdateManyWithoutConnectedThingsInput
  color: String
  passes: PassUpdateManyWithoutOnThingInput
  score: Int
  winner: DateTime
  comments: CommentUpdateManyWithoutOnThingInput
  eliminated: Boolean
  finalistDate: DateTime
  privacy: PrivacySetting
}

input ThingUpdateWithWhereUniqueWithoutAuthorInput {
  where: ThingWhereUniqueInput!
  data: ThingUpdateWithoutAuthorDataInput!
}

input ThingUpdateWithWhereUniqueWithoutCopiedInContentInput {
  where: ThingWhereUniqueInput!
  data: ThingUpdateWithoutCopiedInContentDataInput!
}

input ThingUpdateWithWhereUniqueWithoutPartOfStacksInput {
  where: ThingWhereUniqueInput!
  data: ThingUpdateWithoutPartOfStacksDataInput!
}

input ThingUpdateWithWhereUniqueWithoutPartOfTagsInput {
  where: ThingWhereUniqueInput!
  data: ThingUpdateWithoutPartOfTagsDataInput!
}

input ThingUpsertWithoutCommentsInput {
  update: ThingUpdateWithoutCommentsDataInput!
  create: ThingCreateWithoutCommentsInput!
}

input ThingUpsertWithoutContentInput {
  update: ThingUpdateWithoutContentDataInput!
  create: ThingCreateWithoutContentInput!
}

input ThingUpsertWithoutPassesInput {
  update: ThingUpdateWithoutPassesDataInput!
  create: ThingCreateWithoutPassesInput!
}

input ThingUpsertWithoutVotesInput {
  update: ThingUpdateWithoutVotesDataInput!
  create: ThingCreateWithoutVotesInput!
}

input ThingUpsertWithWhereUniqueWithoutAuthorInput {
  where: ThingWhereUniqueInput!
  update: ThingUpdateWithoutAuthorDataInput!
  create: ThingCreateWithoutAuthorInput!
}

input ThingUpsertWithWhereUniqueWithoutCopiedInContentInput {
  where: ThingWhereUniqueInput!
  update: ThingUpdateWithoutCopiedInContentDataInput!
  create: ThingCreateWithoutCopiedInContentInput!
}

input ThingUpsertWithWhereUniqueWithoutPartOfStacksInput {
  where: ThingWhereUniqueInput!
  update: ThingUpdateWithoutPartOfStacksDataInput!
  create: ThingCreateWithoutPartOfStacksInput!
}

input ThingUpsertWithWhereUniqueWithoutPartOfTagsInput {
  where: ThingWhereUniqueInput!
  update: ThingUpdateWithoutPartOfTagsDataInput!
  create: ThingCreateWithoutPartOfTagsInput!
}

input ThingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: MemberWhereInput
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  content_every: ContentPieceWhereInput
  content_some: ContentPieceWhereInput
  content_none: ContentPieceWhereInput
  copiedInContent_every: ContentPieceWhereInput
  copiedInContent_some: ContentPieceWhereInput
  copiedInContent_none: ContentPieceWhereInput
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  partOfTags_every: TagWhereInput
  partOfTags_some: TagWhereInput
  partOfTags_none: TagWhereInput
  partOfStacks_every: StackWhereInput
  partOfStacks_some: StackWhereInput
  partOfStacks_none: StackWhereInput
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  passes_every: PassWhereInput
  passes_some: PassWhereInput
  passes_none: PassWhereInput
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  winner: DateTime
  winner_not: DateTime
  winner_in: [DateTime!]
  winner_not_in: [DateTime!]
  winner_lt: DateTime
  winner_lte: DateTime
  winner_gt: DateTime
  winner_gte: DateTime
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  eliminated: Boolean
  eliminated_not: Boolean
  finalistDate: DateTime
  finalistDate_not: DateTime
  finalistDate_in: [DateTime!]
  finalistDate_not_in: [DateTime!]
  finalistDate_lt: DateTime
  finalistDate_lte: DateTime
  finalistDate_gt: DateTime
  finalistDate_gte: DateTime
  privacy: PrivacySetting
  privacy_not: PrivacySetting
  privacy_in: [PrivacySetting!]
  privacy_not_in: [PrivacySetting!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ThingWhereInput!]
  OR: [ThingWhereInput!]
  NOT: [ThingWhereInput!]
}

input ThingWhereUniqueInput {
  id: ID
}

type Tweet {
  localID: ID!
  id_str: String!
  tweetJson: Json!
}

type TweetConnection {
  pageInfo: PageInfo!
  edges: [TweetEdge]!
  aggregate: AggregateTweet!
}

input TweetCreateInput {
  localID: ID
  id_str: String!
  tweetJson: Json!
}

type TweetEdge {
  node: Tweet!
  cursor: String!
}

enum TweetOrderByInput {
  localID_ASC
  localID_DESC
  id_str_ASC
  id_str_DESC
  tweetJson_ASC
  tweetJson_DESC
}

type TweetPreviousValues {
  localID: ID!
  id_str: String!
  tweetJson: Json!
}

type TweetSubscriptionPayload {
  mutation: MutationType!
  node: Tweet
  updatedFields: [String!]
  previousValues: TweetPreviousValues
}

input TweetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TweetWhereInput
  AND: [TweetSubscriptionWhereInput!]
  OR: [TweetSubscriptionWhereInput!]
  NOT: [TweetSubscriptionWhereInput!]
}

input TweetUpdateInput {
  id_str: String
  tweetJson: Json
}

input TweetUpdateManyMutationInput {
  id_str: String
  tweetJson: Json
}

input TweetWhereInput {
  localID: ID
  localID_not: ID
  localID_in: [ID!]
  localID_not_in: [ID!]
  localID_lt: ID
  localID_lte: ID
  localID_gt: ID
  localID_gte: ID
  localID_contains: ID
  localID_not_contains: ID
  localID_starts_with: ID
  localID_not_starts_with: ID
  localID_ends_with: ID
  localID_not_ends_with: ID
  id_str: String
  id_str_not: String
  id_str_in: [String!]
  id_str_not_in: [String!]
  id_str_lt: String
  id_str_lte: String
  id_str_gt: String
  id_str_gte: String
  id_str_contains: String
  id_str_not_contains: String
  id_str_starts_with: String
  id_str_not_starts_with: String
  id_str_ends_with: String
  id_str_not_ends_with: String
  AND: [TweetWhereInput!]
  OR: [TweetWhereInput!]
  NOT: [TweetWhereInput!]
}

input TweetWhereUniqueInput {
  localID: ID
  id_str: String
}

type Vote {
  id: ID!
  voter: Member!
  onThing: Thing
  onComment: Comment
  onContentPiece: ContentPiece
  value: Int!
  createdAt: DateTime!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  voter: MemberCreateOneWithoutVotesInput!
  onThing: ThingCreateOneWithoutVotesInput
  onComment: CommentCreateOneWithoutVotesInput
  onContentPiece: ContentPieceCreateOneWithoutVotesInput
  value: Int!
}

input VoteCreateManyWithoutOnCommentInput {
  create: [VoteCreateWithoutOnCommentInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutOnContentPieceInput {
  create: [VoteCreateWithoutOnContentPieceInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutOnThingInput {
  create: [VoteCreateWithoutOnThingInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutVoterInput {
  create: [VoteCreateWithoutVoterInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutOnCommentInput {
  id: ID
  voter: MemberCreateOneWithoutVotesInput!
  onThing: ThingCreateOneWithoutVotesInput
  onContentPiece: ContentPieceCreateOneWithoutVotesInput
  value: Int!
}

input VoteCreateWithoutOnContentPieceInput {
  id: ID
  voter: MemberCreateOneWithoutVotesInput!
  onThing: ThingCreateOneWithoutVotesInput
  onComment: CommentCreateOneWithoutVotesInput
  value: Int!
}

input VoteCreateWithoutOnThingInput {
  id: ID
  voter: MemberCreateOneWithoutVotesInput!
  onComment: CommentCreateOneWithoutVotesInput
  onContentPiece: ContentPieceCreateOneWithoutVotesInput
  value: Int!
}

input VoteCreateWithoutVoterInput {
  id: ID
  onThing: ThingCreateOneWithoutVotesInput
  onComment: CommentCreateOneWithoutVotesInput
  onContentPiece: ContentPieceCreateOneWithoutVotesInput
  value: Int!
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
  value: Int!
  createdAt: DateTime!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateInput {
  voter: MemberUpdateOneRequiredWithoutVotesInput
  onThing: ThingUpdateOneWithoutVotesInput
  onComment: CommentUpdateOneWithoutVotesInput
  onContentPiece: ContentPieceUpdateOneWithoutVotesInput
  value: Int
}

input VoteUpdateManyDataInput {
  value: Int
}

input VoteUpdateManyMutationInput {
  value: Int
}

input VoteUpdateManyWithoutOnCommentInput {
  create: [VoteCreateWithoutOnCommentInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutOnCommentInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutOnCommentInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithoutOnContentPieceInput {
  create: [VoteCreateWithoutOnContentPieceInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutOnContentPieceInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutOnContentPieceInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithoutOnThingInput {
  create: [VoteCreateWithoutOnThingInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutOnThingInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutOnThingInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithoutVoterInput {
  create: [VoteCreateWithoutVoterInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutVoterInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutVoterInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput!
  data: VoteUpdateManyDataInput!
}

input VoteUpdateWithoutOnCommentDataInput {
  voter: MemberUpdateOneRequiredWithoutVotesInput
  onThing: ThingUpdateOneWithoutVotesInput
  onContentPiece: ContentPieceUpdateOneWithoutVotesInput
  value: Int
}

input VoteUpdateWithoutOnContentPieceDataInput {
  voter: MemberUpdateOneRequiredWithoutVotesInput
  onThing: ThingUpdateOneWithoutVotesInput
  onComment: CommentUpdateOneWithoutVotesInput
  value: Int
}

input VoteUpdateWithoutOnThingDataInput {
  voter: MemberUpdateOneRequiredWithoutVotesInput
  onComment: CommentUpdateOneWithoutVotesInput
  onContentPiece: ContentPieceUpdateOneWithoutVotesInput
  value: Int
}

input VoteUpdateWithoutVoterDataInput {
  onThing: ThingUpdateOneWithoutVotesInput
  onComment: CommentUpdateOneWithoutVotesInput
  onContentPiece: ContentPieceUpdateOneWithoutVotesInput
  value: Int
}

input VoteUpdateWithWhereUniqueWithoutOnCommentInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutOnCommentDataInput!
}

input VoteUpdateWithWhereUniqueWithoutOnContentPieceInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutOnContentPieceDataInput!
}

input VoteUpdateWithWhereUniqueWithoutOnThingInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutOnThingDataInput!
}

input VoteUpdateWithWhereUniqueWithoutVoterInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutVoterDataInput!
}

input VoteUpsertWithWhereUniqueWithoutOnCommentInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutOnCommentDataInput!
  create: VoteCreateWithoutOnCommentInput!
}

input VoteUpsertWithWhereUniqueWithoutOnContentPieceInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutOnContentPieceDataInput!
  create: VoteCreateWithoutOnContentPieceInput!
}

input VoteUpsertWithWhereUniqueWithoutOnThingInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutOnThingDataInput!
  create: VoteCreateWithoutOnThingInput!
}

input VoteUpsertWithWhereUniqueWithoutVoterInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutVoterDataInput!
  create: VoteCreateWithoutVoterInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  voter: MemberWhereInput
  onThing: ThingWhereInput
  onComment: CommentWhereInput
  onContentPiece: ContentPieceWhereInput
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
