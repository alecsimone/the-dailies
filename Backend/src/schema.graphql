# import * from './generated/prisma.graphql'

type Query {
   me: Member
   categories: [Category]
   thing(where: ThingWhereUniqueInput!): Thing
   myThings(orderBy: ThingOrderByInput): [Thing]!
   myFriendsThings(orderBy: ThingOrderByInput): [Thing]!
   publicThings(orderBy: ThingOrderByInput): [Thing]!
   searchTags(searchTerm: String): [Tag]!
   tagByTitle(title: String!): Tag
}

type Mutation {
   signup(
    email: String!
    password: String!
    displayName: String!
    name: String
    twitchName: String
  ): Member!
  login(email: String!, password: String!): Member!
  logout: SuccessMessage
  createThing(
      title: String!
      link: String
      category: String
      content: String
      tags: String
      privacy: String
  ): Thing
  addContentPiece(content: String, id: ID!, type: String!): Stuff
  deleteContentPiece(contentPieceID: ID!, id: ID!, type: String!): Stuff
  editContentPiece(contentPieceID: ID!, content: String!, id: ID!, type: String!): Stuff
  setThingPrivacy(privacySetting: PrivacySetting!, thingID: ID!): Thing
  setThingCategory(category: String!, thingID: ID!): Thing
  addTagToThing(tag: String!, thingID: ID!): Thing
  setFeaturedImage(featuredImage: String!, id: ID!, type: String!): Stuff
  setThingTitle(title: String!, thingID: ID!): Thing,
  setPublicity(public: Boolean!, id: ID!, type: String!): Stuff
  addComment(comment: String!, id: ID!, type: String!): Stuff
  editComment(commentID: ID!, stuffID: ID!, type: String!, newComment: String!): Stuff
  deleteComment(commentID: ID!, stuffID: ID!, type: String!): Stuff
}

union Stuff = Thing | Tag

type Subscription {
   thing(id: ID!): ThingSubscriptionPayload
   tag: TagSubscriptionPayload
}

type SuccessMessage {
  message: String
}