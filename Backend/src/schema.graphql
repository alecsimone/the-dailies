# import * from './generated/prisma.graphql'

type Query {
   finishSignup(id: String!, code: String!): Member!
   finishReset(id: String!, code: String!): Member
   me: Member
   member(id: ID, displayName: String): Member
   thing(where: ThingWhereUniqueInput!): Thing
   myThings(orderBy: ThingOrderByInput, cursor: String): [Thing]!
   myFriendsThings(orderBy: ThingOrderByInput): [Thing]!
   publicThings(orderBy: ThingOrderByInput): [Thing]!
   allThings(cursor: String): [Thing]!
   searchTaxes(searchTerm: String, personal: Boolean!): [Tax]!
   taxByTitle(title: String!, personal: Boolean!, cursor: String): Tax
   finishTwitterLogin(token: String!, verifier: String!): SuccessMessage
   refreshLists: SuccessMessage
   getTweet(tweetID: String!): SuccessMessage!
   getTweetsForList(listID: String): SuccessMessage!
   search(string: String!, isTitleOnly: Boolean, cursor: String): [Thing]!
   searchMembers(string: String!): [Member]
}

type Mutation {
   startSignup(
    email: String!
    password: String!
    displayName: String!
    name: String
    twitchName: String
  ): Member!
  login(email: String!, password: String!): Member!
  logout: SuccessMessage
  requestReset(email: String!): Member
  changePassword(id: String!, code: String!, password: String!): Member!
  createThing(
      title: String!
      link: String
      content: String
      tags: String
      privacy: String
  ): Thing
  addContentPiece(content: String, id: ID!, type: String!): Stuff
  storeUnsavedThingChanges(id: ID!, unsavedContent: String!): Stuff
  deleteContentPiece(contentPieceID: ID!, id: ID!, type: String!): Stuff
  editContentPiece(contentPieceID: ID!, content: String!, id: ID!, type: String!): Stuff
  storeUnsavedContentPieceChanges(pieceId: ID!, thingId: ID!, unsavedContent: String!): Stuff
  clearUnsavedContentPieceChanges(pieceId: ID!, thingId: ID!): Stuff
  reorderContent(id: ID!, type: String!, oldPosition: Int!, newPosition: Int!): Stuff
  setThingPrivacy(privacySetting: PrivacySetting!, thingID: ID!): Thing
  addTaxToThing(tax: String!, thingID: ID!, personal: Boolean): Thing
  addTaxToThingById(tax: ID!, thingID: ID!, personal: Boolean): Thing
  removeTaxFromThing(tax: String!, thingID: ID!, personal: Boolean): Thing
  setFeaturedImage(featuredImage: String!, id: ID!, type: String!): Stuff
  setStuffTitle(title: String!, id: ID!, type: String!): Stuff,
  setPublicity(public: Boolean!, id: ID!, type: String!): Stuff
  addComment(comment: String!, id: ID!, type: String!, replyToID: ID): Stuff
  editComment(commentID: ID!, stuffID: ID!, type: String!, newComment: String!): Stuff
  deleteComment(commentID: ID!, stuffID: ID!, type: String!): Stuff
  editLink(link: String!, id: ID!): Thing
  initiateTwitterLogin: SuccessMessage
  likeTweet(tweetID: String!, alreadyLiked: String!): SuccessMessage,
  markTweetsSeen(listID: String!, tweetIDs: [String]!, lastTweeter: Boolean): Member
  editProfile(id: ID!, avatar: String, displayName: String, email: String, twitchName: String, defaultPrivacy: String, defaultExpansion: String): Member
  sendFriendRequest(id: ID!): Member
  confirmFriendRequest(id: ID!): Member
  ignoreFriendRequest(id: ID!): Member
  saveTweet(tweetURL: String!, tweeter: String!, tweetText: String): Thing
  deleteThing(id: ID!): Thing
  readNotifications(ids: [ID]!): Member
  newBlankThing: Thing
  deleteTax(id: ID!, personal: Boolean!): Tax
  setColor(color: String!, id: ID!, type: String!): Stuff
  vote(id: ID!, type: String!, isFreshVote: Boolean!): Stuff
  toggleBroadcastView(newState: Boolean!): Member
  editSummary(summary: String!, id: ID!, type: String!): Stuff
  copyContentPiece(contentPieceID: ID!, newThingID: ID!): Thing
  unlinkContentPiece(contentPieceID: ID!, thingID: ID!): Thing
  addViewerToThing(thingID: ID!, memberID: ID!): Thing
  removeViewerFromThing(thingID: ID!, memberID: ID!): Thing
  storeOrganizeState(state: String!): Member
}

union Stuff = Thing | Tag | Stack | Comment | ContentPiece
union Tax = Tag | Stack

type Subscription {
   thing(id: ID!): ThingSubscriptionPayload
   tag: TagSubscriptionPayload
   stack: StackSubscriptionPayload
   me: MemberSubscriptionPayload
   myThings: ThingSubscriptionPayload
}

type SuccessMessage {
  message: String
}