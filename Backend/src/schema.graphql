# import * from './generated/prisma.graphql'

type Query {
   finishSignup(id: String!, code: String!): Member!
   finishReset(id: String!, code: String!): Member
   me: Member
   member(id: ID, displayName: String): Member
   thing(where: ThingWhereUniqueInput!): Thing
   myThings(orderBy: ThingOrderByInput, cursor: String, forCollection: ID, count: Int): [Thing]!
   myFriendsThings(orderBy: ThingOrderByInput): [Thing]!
   publicThings(orderBy: ThingOrderByInput): [Thing]!
   allThings(cursor: String, count: Int): [Thing]!
   searchTaxes(searchTerm: String, personal: Boolean!): [Tax]!
   taxByTitle(title: String!, personal: Boolean!, cursor: String): Tax
   finishTwitterLogin(token: String!, verifier: String!): SuccessMessage
   refreshLists: SuccessMessage
   getTweet(tweetID: String!): SuccessMessage!
   getTweetsForList(listID: String): SuccessMessage!
   search(string: String!, isTitleOnly: Boolean, cursor: String, count: Int): [Thing]!
   searchMembers(string: String!): [Member]
   getCollections: Member,
   getCollection(id: ID!): Collection
   moreMemberThings(memberID: String!, cursor: String, count: Int): [Thing]
   moreMemberVotes(memberID: String!, cursor: String, count: Int): [Vote]
   getLinkData(url: String!): Link
   getRelationsForThing(thingID: ID!, totalCount: Int): [Connection]
   getLinkArchive: Member
}

type Mutation {
   startSignup(
    email: String!
    password: String!
    displayName: String!
    name: String
    twitchName: String
  ): Member!
  login(email: String!, password: String!): Member!
  logout: SuccessMessage
  requestReset(email: String!): Member
  changePassword(id: String!, code: String!, password: String!): Member!

  addContentPiece(content: String, id: ID!, type: String!): Stuff
  storeUnsavedThingChanges(id: ID!, unsavedContent: String!): Stuff
  deleteContentPiece(contentPieceID: ID!, id: ID!, type: String!): Stuff
  editContentPiece(contentPieceID: ID!, content: String!, id: ID!, type: String!): Stuff
  storeUnsavedContentPieceChanges(pieceId: ID!, thingId: ID!, unsavedContent: String!): Stuff
  clearUnsavedContentPieceChanges(pieceId: ID!, thingId: ID!): Stuff
  reorderContent(id: ID!, type: String!, oldPosition: Int!, newPosition: Int!): Stuff
  copyContentPiece(contentPieceID: ID!, newThingID: ID!): Thing
  unlinkContentPiece(contentPieceID: ID!, thingID: ID!): Thing

  setStuffPrivacy(privacySetting: PrivacySetting!, stuffID: ID!, type: String): Stuff
  addTaxToThing(tax: String!, thingID: ID!, personal: Boolean): Thing
  addTaxToThingById(tax: ID!, thingID: ID!, personal: Boolean): Thing
  addTaxesToThings(taxes: String!, thingIDs: [ID!] personal: Boolean): [Thing]
  removeTaxFromThing(tax: String!, thingID: ID!, personal: Boolean): Thing
  setFeaturedImage(featuredImage: String!, id: ID!, type: String!): Stuff
  setStuffTitle(title: String!, id: ID!, type: String!): Stuff,
  setPublicity(public: Boolean!, id: ID!, type: String!): Stuff
  editLink(link: String!, id: ID!): Thing
  deleteThing(id: ID!): Thing
  newBlankThing: Thing
  deleteTax(id: ID!, personal: Boolean!): Tax
  setColor(color: String!, id: ID!, type: String!): Stuff
  editSummary(summary: String!, id: ID!, type: String!): Stuff
  addViewerToStuff(stuffID: ID!, memberID: ID!, type: String): Stuff
  removeViewerFromStuff(stuffID: ID!, memberID: ID!, type: String): Stuff

  addComment(comment: String!, id: ID!, type: String!, replyToID: ID): Stuff
  editComment(commentID: ID!, stuffID: ID!, type: String!, newComment: String!): Stuff
  deleteComment(commentID: ID!, stuffID: ID!, type: String!): Stuff

  initiateTwitterLogin: SuccessMessage
  likeTweet(tweetID: String!, alreadyLiked: String!): SuccessMessage,
  markTweetsSeen(listID: String!, tweetIDs: [String]!, lastTweeter: Boolean): Member
  saveTweet(tweetURL: String!, tweeter: String!, tweetText: String): Thing

  editProfile(id: ID!, avatar: String, displayName: String, email: String, twitchName: String, defaultPrivacy: String, defaultExpansion: String): Member
  sendFriendRequest(id: ID!): Member
  confirmFriendRequest(id: ID!): Member
  ignoreFriendRequest(id: ID!): Member
  readNotifications(ids: [ID]!): Member
  toggleBroadcastView(newState: Boolean!): Member

  vote(id: ID!, type: String!, isFreshVote: Boolean!): Stuff

  storeOrganizeState(state: String!): Member

  addCollection: Member
  deleteCollection(collectionID: ID!): Member
  setActiveCollection(collectionID: ID!): Member
  renameCollection(collectionID: ID! newTitle: String!): Collection
  addGroupToCollection(collectionID: ID!, newGroupID: String!, columnID: String!): Collection
  deleteGroupFromCollection(collectionID: ID! groupID: String!): Collection
  renameGroupOnCollection(collectionID: ID!, groupID: String!, newTitle: String!): Collection
  copyThingToCollectionGroup(collectionID: ID!, thingID: ID!, targetGroupID: String!): Collection
  addLinkToCollectionGroup(url: String!, groupID: ID!, position: Int): CollectionGroup
  removeLinkFromCollectionGroup(linkID: ID!, groupID: ID!): CollectionGroup
  reorderGroups(groupOneID: ID, newOrderOne: [String!], groupTwoID: ID, newOrderTwo: [String!]): [CollectionGroup!]
  moveCardToGroup(linkID: ID!, cardType: String, sourceGroupID: ID, destinationGroupID: ID, newPosition: Int): [CollectionGroup!]
  moveGroupToColumn(groupID: ID!, sourceColumnID: ID, destinationColumnID: ID, newPosition: Int): [ColumnOrder!]
  reorderGroup(groupID: ID!, linkID: ID!, newPosition: Int!): CollectionGroup
  reorderColumn(columnID: ID!, groupID: ID!, newPosition: Int!): ColumnOrder
  addNoteToGroup(groupID: ID!, position: Int): CollectionGroup
  deleteNote(noteID: ID!): CollectionGroup
  editNote(noteID: ID!, newContent: String!): Note
  setCollectionPrivacy(collectionID: ID!, privacy: PrivacySetting!): Collection
  addIndividualPermissionToCollection(collectionID: ID!, memberID: ID!, permissionType: String!): Collection
  removeIndividualPermissionFromCollection(collectionID: ID!, memberID: ID!, permissionType: String!): Collection

  addConnection(subjectID: ID!, objectID: ID!, relationship: String!, strength: Int): [Thing!]
  deleteConnection(connectionID: ID!): [Thing!],
  strengthenConnection(connectionID: ID!): Connection!

  addLinkToArchive(url: String!, tags: String): Member
  addTagToPersonalLink(linkID: ID!, tagToAdd: String!): PersonalLink
  editPersonalLink(linkID: ID!, title: String, description: String): PersonalLink
}

union Stuff = Thing | Tag | Stack | Comment | ContentPiece
union Tax = Tag | Stack

type Subscription {
   thing(id: ID!): ThingSubscriptionPayload
   things(IDs: [ID!]): ThingSubscriptionPayload
   tag: TagSubscriptionPayload
   stack: StackSubscriptionPayload
   me: MemberSubscriptionPayload
   myThings: ThingSubscriptionPayload
}

type SuccessMessage {
  message: String
}