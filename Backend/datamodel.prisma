type Thing {
  id: ID! @id @unique
  title: String! @default(value: "Untitled Thing")
  author: Member! @relation(name: "Author")
  featuredImage: String
  link: String
  content: [ContentPiece!] @scalarList(strategy:RELATION) @relation(name: "OriginalThingForContentPiece")
  unsavedNewContent: String
  copiedInContent: [ContentPiece] @relation(name: "ThingsAddedToForContentPiece")
  contentOrder: [String!] @scalarList(strategy:RELATION)
  summary: String
  partOfTags: [Tag]
  partOfStacks: [Stack]
  color: String
  votes: [Vote]
  passes: [Pass]
  score: Int! @default(value: 0)
  winner: DateTime
  comments: [Comment]
  eliminated: Boolean! @default(value: false)
  finalistDate: DateTime
  privacy: PrivacySetting @default(value: Private)
  individualViewPermissions: [Member] @relation(name: "IndividualViewers")
  manualUpdatedAt: DateTime
  createdAt: DateTime! @createdAt
  updatedAt: DateTime @updatedAt
}

type ContentPiece {
   id: ID! @id @unique
   content: String!
   unsavedNewContent: String
   summary: String
   comments: [Comment]
   onThing: Thing @relation(name: "OriginalThingForContentPiece")
   copiedToThings: [Thing] @relation(name: "ThingsAddedToForContentPiece")
   onTag: Tag
   votes: [Vote]
   score: Int! @default(value: 0)
}

type Tag {
  id: ID! @id @unique
  title: String! @unique
  author: Member!
  featuredImage: String
  content: [ContentPiece!] @scalarList(strategy:RELATION)
  unsavedNewContent: String
  contentOrder: [String!] @scalarList(strategy:RELATION)
  summary: String
  connectedThings: [Thing]
  color: String
  comments: [Comment]
  createdAt: DateTime! @createdAt
  updatedAt: DateTime @updatedAt
}

type Stack {
  id: ID! @id @unique
  title: String!
  author: Member!
  featuredImage: String
  content: [ContentPiece!] @scalarList(strategy:RELATION)
  unsavedNewContent: String
  contentOrder: [String!] @scalarList(strategy:RELATION)
  connectedThings: [Thing]
  color: String
  comments: [Comment]
  createdAt: DateTime! @createdAt
  updatedAt: DateTime @updatedAt
}

type Comment {
  id: ID! @id @unique
  author: Member!
  comment: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime @updatedAt
  onThing: Thing
  onContentPiece: ContentPiece
  replies: [Comment] @relation(name: "Replies")
  replyTo: Comment @relation(name: "ReplyTo")
  onTag: Tag
  votes: [Vote]
  score: Int
}

type Vote {
  id: ID! @id @unique
  voter: Member!
  onThing: Thing
  onComment: Comment
  onContentPiece: ContentPiece
  value: Int!
  createdAt: DateTime! @createdAt
}

type Pass {
   id: ID! @id @unique
   passer: Member!
   onThing: Thing
   createdAt: DateTime! @createdAt
}

type Member {
  id: ID! @id @unique
  displayName: String!
  name: String
  avatar: String
  rep: Int! @default(value: 0)
  points: Int! @default(value: 0)
  giveableRep: Int! @default(value: 0)
  color: String
  friends: [Member] @relation(name:"Friends")
  friendRequests: [Member] @relation(name:"FriendRequests")
  ignoredFriendRequests: [Member] @relation(name:"IgnoredFriendRequests")
  notifications: [Notification] @relation(name:"Notification")
  twitchName: String
  email: String! @unique
  votes: [Vote]
  passes: [Pass]
  createdThings: [Thing] @relation(name: "Author")
  ownedTags: [Tag]
  defaultPrivacy: PrivacySetting
  individualViewPermissions: [Thing] @relation(name: "IndividualViewers")
  defaultExpansion: Boolean @default(value: false)
  broadcastView: Boolean @default(value: false)
  collections: [Collection] @relation(name: "Collector")
  lastActiveCollection: Collection @relation(name:"LastActiveCollection")
  comments: [Comment]
  password: String!
  roles: [Role!] @scalarList(strategy: RELATION)
  role: Role
  verificationToken: String
  verificationTokenExpiry: Float
  resetToken: String
  resetTokenExpiry: Float
  twitterTokenSecret: String
  twitterUserName: String
  twitterUserID: String
  twitterUserToken: String
  twitterUserTokenSecret: String
  twitterListsObject: String
  twitterSeenIDs: [String] @scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime @updatedAt
}

type Notification {
   id: ID! @id @unique
   kind: String!
   recipient: Member! @relation(name: "Notification")
   initiator: Member! @relation(name: "NotificationInitiator")
   unread: Boolean! @default(value: true)
   linkQuery: String
}

type Tweet {
   localID: ID! @id @unique
   id_str: String! @unique
   tweetJson: Json!
}

type CollectionGroup {
   id: ID! @id @unique
   title: String! @default(value: "Untitled Group")
   inCollection: Collection @relation(name: "ConnectedGroups")
   things: [Thing] @scalarList(strategy: RELATION)
   order: [String] @scalarList(strategy: RELATION)
   createdAt: DateTime! @createdAt
   updatedAt: DateTime @updatedAt
}

type ColumnOrder {
   id: ID! @id @unique
   order: [String] @scalarList(strategy: RELATION)
}

type TagOrder {
   id: ID! @id @unique
   tag: Tag
   order: [String] @scalarList(strategy: RELATION)
   forCollection: Collection
}

type Collection {
   id: ID! @id @unique
   title: String! @default(value: "New Collection")
   author: Member! @relation(name: "Collector")
   filterString: String
   hiddenThings: [Thing] @scalarList(strategy: RELATION)
   groupByTag: Boolean! @default(value: false)
   hiddenTags: [Tag] @scalarList(strategy: RELATION)
   hiddenGroups: [CollectionGroup] @scalarList(strategy: RELATION) @relation(name: "HiddenGroups")
   userGroups: [CollectionGroup] @scalarList(strategy: RELATION) @relation(name: "ConnectedGroups")
   ungroupedThingsOrder: [String] @scalarList(strategy: RELATION)
   tagOrders: [TagOrder] @scalarList(strategy: RELATION)
   expandedCards: [String] @scalarList(strategy: RELATION)
   columnOrders: [ColumnOrder] @relation(name: "ManualColumnOrders")
   tagColumnOrders: [ColumnOrder] @relation(name: "TagColumnOrders")
   thingQueryCursor: String
   createdAt: DateTime! @createdAt
   updatedAt: DateTime @updatedAt
}

enum Role {
  Admin
  Editor
  Moderator
  Member
  LiteMember
  Unverified
}

enum PrivacySetting {
   Public
   Private
   Friends
   FriendsOfFriends
}